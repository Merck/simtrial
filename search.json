[{"path":"https://merck.github.io/simtrial/articles/modestWLRTVignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using the Magirr-Burman weights for testing","text":"Magirr Burman (2019) implemented modestly weighted logrank test following claim: Tests new class can constructed high power delayed-onset treatment effect scenario, well almost efficient standard logrank test proportional hazards. implemented package modestWLRT. Since implementation relatively straightforward, added functionality simtrial package explain use wMB() function. consider two examples: single stratum example compare results modestWLRT package. stratified example implemented modestWLRT. Packages used follows:","code":"library(simtrial) library(dplyr) library(survival)"},{"path":[]},{"path":"https://merck.github.io/simtrial/articles/modestWLRTVignette.html","id":"magirr-and-burman-delayed-effect-example","dir":"Articles","previous_headings":"Single stratum examples","what":"Magirr and Burman delayed effect example","title":"Using the Magirr-Burman weights for testing","text":"First, specify study duration, sample size enrollment rates. enrollment rate assumed constant enrollment period targeted sample size reached. failure rates, consider delayed treatment effect example Magirr Burman (2019). control group exponential failure rate median 15 months. initial 6 months, underlying hazard ratio one followed hazard ratio 0.7 thereafter. differs Magirr Burman (2019) delayed effect assumptions assume hazard ratio 0.5 6 months. Now generate single dataset characteristics cut data analysis 36 months post start enrollment. plot Kaplan-Meier curves resulting dataset (red curve experimental treatment, black control):  perform logrank weighted logrank tests follows: Now MaxCombo test compoenent tests, p-value Next, consider Magirr Burman (2019) modestly weighted logrank test -weighting specifid first 6 months. requires generating weights computing test. Finally, consider weighted logrank tests less -weighting. Results quite similar results greater -weighting. Check vs tenFH(). Now MaxCombo test compoenent tests, p-value ","code":"studyDuration <- 36 sampleSize <- 200 enrollRates <- tibble::tibble(duration = 12, rate = 200 / 12) failRates <- tibble::tribble(   ~Stratum, ~duration, ~failRate, ~hr, ~dropoutRate,   \"All\", 6, log(2) / 15, 1, 0,   \"All\", 36, log(2) / 15, .7, 0 ) set.seed(7783) xpar <- simfix2simPWSurv(failRates) MBdelay <- simPWSurv(   n = sampleSize,   strata = tibble::tibble(Stratum = \"All\", p = 1),   block = c(rep(\"Control\", 2), rep(\"Experimental\", 2)),   enrollRates = enrollRates,   failRates = xpar$failRates,   dropoutRates = xpar$dropoutRates ) %>%   cutData(studyDuration) fit <- survfit(Surv(tte, event) ~ Treatment, data = MBdelay) plot(fit, col = 1:2, mark = \"|\", xaxt = \"n\") axis(1, xaxp = c(0, 36, 6)) xx <- MBdelay %>%   tensurv(txval = \"Experimental\") %>%   tenFHcorr(rg = tibble(rho = c(0, 0, 1), gamma = c(0, 1, 1))) %>%   mutate(p = pnorm(Z)) xx #>   rho gamma         Z        V1        V2        V3 #> 1   0     0 -1.623630 1.0000000 0.8620167 0.9318306 #> 2   0     1 -2.240298 0.8620167 1.0000000 0.9596123 #> 3   1     1 -2.074833 0.9318306 0.9596123 1.0000000 #>            p #> 1 0.05222739 #> 2 0.01253579 #> 3 0.01900102 xx %>% pMaxCombo() #> [1] 0.02050061 ZMB <- MBdelay %>%   tensurv(txval = \"Experimental\") %>%   wMB(6) %>%   summarize(S = sum(OminusE * wMB), V = sum(Var * wMB^2), Z = S / sqrt(V)) # Compute p-value of modestly weighted logrank of Magirr-Burman pnorm(ZMB$Z) #> [1] 0.0384576 xx <- MBdelay %>%   tensurv(txval = \"Experimental\") %>%   tenFHcorr(rg = tibble(rho = c(0, 0, .5), gamma = c(0, .5, .5))) %>%   mutate(p = pnorm(Z)) xx #>   rho gamma         Z        V1        V2        V3 #> 1 0.0   0.0 -1.623630 1.0000000 0.9402251 0.9682455 #> 2 0.0   0.5 -2.153278 0.9402251 1.0000000 0.9880393 #> 3 0.5   0.5 -2.024016 0.9682455 0.9880393 1.0000000 #>            p #> 1 0.05222739 #> 2 0.01564840 #> 3 0.02148424 xx <- MBdelay %>%   tensurv(txval = \"Experimental\") %>%   tenFH(rg = tibble(rho = c(0, 0, .5), gamma = c(0, .5, .5))) xx #> # A tibble: 3 × 3 #>     rho gamma     Z #>   <dbl> <dbl> <dbl> #> 1   0     0   -1.62 #> 2   0     0.5 -2.15 #> 3   0.5   0.5 -2.02 xx <- MBdelay %>%   tensurv(txval = \"Experimental\") %>%   tenFHcorr(rg = tibble(rho = c(0, 0, .5, .5), gamma = c(0, .5, .5, 0))) %>%   mutate(p = pnorm(Z)) xx #>   rho gamma         Z        V1        V2        V3 #> 1 0.0   0.0 -1.623630 1.0000000 0.9402251 0.9682455 #> 2 0.0   0.5 -2.153278 0.9402251 1.0000000 0.9880393 #> 3 0.5   0.5 -2.024016 0.9682455 0.9880393 1.0000000 #> 4 0.5   0.0 -1.342828 0.9873481 0.8764846 0.9257976 #>          V4          p #> 1 0.9873481 0.05222739 #> 2 0.8764846 0.01564840 #> 3 0.9257976 0.02148424 #> 4 1.0000000 0.08966377 xx %>% pMaxCombo() #> [1] 0.02407911"},{"path":"https://merck.github.io/simtrial/articles/modestWLRTVignette.html","id":"freidlin-and-korn-strong-null-hypothesis-example","dir":"Articles","previous_headings":"Single stratum examples","what":"Freidlin and Korn strong null hypothesis example","title":"Using the Magirr-Burman weights for testing","text":"underlying survival worse experimental group uniformly worse experimental group end study. presented Freidlin Korn (2019). case, hazard ratio 16 1/10 1 year (1.2 months), followed hazard ratio First, specify study duration, sample size enrollment rates. enrollment rate assumed constant enrollment period targeted sample size reached. failure rates, consider delayed treatment effect example Magirr Burman (2019). control group exponential failure rate median 15 months. initial 6 months, underlying hazard ratio one followed hazard ratio 0.7 thereafter. differs Magirr Burman (2019) delayed effect assumptions assume hazard ratio 0.5 6 months. Now generate single dataset characteristics cut data analysis 36 months post start enrollment. plot Kaplan-Meier curves resulting dataset (red curve experimental treatment, black control):  perform logrank weighted logrank tests follows: Now MaxCombo test compoenent tests, p-value Next, consider Magirr Burman (2019) modestly weighted logrank test -weighting specifid first 6 months. requires generating weights computing test. Finally, consider weighted logrank tests less -weighting. Results quite similar results greater -weighting. Now MaxCombo test compoenent tests, p-value ","code":"studyDuration <- 5 sampleSize <- 2000 enrollDuration <- .0001 enrollRates <- tibble::tibble(duration = enrollDuration, rate = sampleSize / enrollDuration) failRates <- tibble::tibble(   Stratum = \"All\",   failRate = 0.25,   dropoutRate = 0,   hr = c(4 / .25, .19 / .25),   duration = c(.1, 4.9) ) set.seed(7783) xpar <- simfix2simPWSurv(failRates) FHwn <- simPWSurv(   n = sampleSize,   strata = tibble::tibble(Stratum = \"All\", p = 1),   block = c(rep(\"Control\", 2), rep(\"Experimental\", 2)),   enrollRates = enrollRates,   failRates = xpar$failRates,   dropoutRates = xpar$dropoutRates ) %>%   cutData(studyDuration) fit <- survfit(Surv(tte, event) ~ Treatment, data = FHwn) plot(fit, col = 1:2, mark = \"|\", xaxt = \"n\") axis(1, xaxp = c(0, 36, 6)) xx <- FHwn %>%   tensurv(txval = \"Experimental\") %>%   tenFHcorr(rg = tibble(rho = c(0, 0, 1), gamma = c(0, 1, 1))) %>%   mutate(p = pnorm(Z)) xx #>   rho gamma         Z        V1        V2        V3 #> 1   0     0  4.617446 1.0000000 0.8655736 0.9370555 #> 2   0     1 -2.410882 0.8655736 1.0000000 0.9547499 #> 3   1     1 -1.039684 0.9370555 0.9547499 1.0000000 #>             p #> 1 0.999998058 #> 2 0.007957003 #> 3 0.149243406 xx %>% pMaxCombo() #> [1] 0.01330616 ZMB <- FHwn %>%   tensurv(txval = \"Experimental\") %>%   wMB(6) %>%   summarize(S = sum(OminusE * wMB), V = sum(Var * wMB^2), Z = S / sqrt(V)) # Compute p-value of modestly weighted logrank of Magirr-Burman pnorm(ZMB$Z) #> [1] 0.7767713 xx <- FHwn %>%   tensurv(txval = \"Experimental\") %>%   tenFHcorr(rg = tibble(rho = c(0, 0, .5), gamma = c(0, .5, .5))) %>%   mutate(p = pnorm(Z)) xx #>   rho gamma          Z        V1        V2        V3 #> 1 0.0   0.0  4.6174462 1.0000000 0.9422827 0.9715693 #> 2 0.0   0.5 -0.3387568 0.9422827 1.0000000 0.9863309 #> 3 0.5   0.5  0.9494496 0.9715693 0.9863309 1.0000000 #>           p #> 1 0.9999981 #> 2 0.3673965 #> 3 0.8288040 xx %>% pMaxCombo() #> [1] 0.4237883"},{"path":"https://merck.github.io/simtrial/articles/modestWLRTVignette.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Using the Magirr-Burman weights for testing","text":"Freidlin, Boris, Edward L Korn. 2019. “Methods Accommodating Nonproportional Hazards Clinical Trials: Ready Primary Analysis?” Journal Clinical Oncology 37 (35): 3455–9. Magirr, Dominic, Carl-Fredrik Burman. 2019. “Modestly Weighted Logrank Tests.” Statistics Medicine 38 (20): 3782–90.","code":""},{"path":"https://merck.github.io/simtrial/articles/pMaxComboVignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Computing p-values for Fleming-Harring weighted logrank tests and the MaxCombo test","text":"vignette demonstrates use simple routine simulations testing using Fleming-Harrington weighted logrank tests MaxCombo test. addition, demonstrate perform tests dataset generated simulation routines within package. Note p-values computed one-sided small values indicating experimental treatment favored.","code":""},{"path":"https://merck.github.io/simtrial/articles/pMaxComboVignette.html","id":"defining-the-test","dir":"Articles","previous_headings":"","what":"Defining the test","title":"Computing p-values for Fleming-Harring weighted logrank tests and the MaxCombo test","text":"MaxCombo test posed maximum multiple Fleming-Harrington weighted logrank tests (Harrington Fleming (1982), Fleming Harrington (2011)). Combination tests looking maximum selected tests class also proposed; see Lee (2007), Roychoudhury et al. (2019), Lin et al. (2019). Fleming-Harrington class indexed parameters \\(\\rho\\ge 0\\) \\(\\gamma\\ge 0\\). denote FH(\\(\\rho,\\gamma\\)). class includes logrank test FH(0,0). tests interest include: FH(0,1): test -weights early events FH(1,0): test -weights late events FH(1,1): test -weights events increasingly quantiles differ median","code":""},{"path":[]},{"path":"https://merck.github.io/simtrial/articles/pMaxComboVignette.html","id":"generating-test-statistics-with-simfix","dir":"Articles","previous_headings":"Executing for a single dataset","what":"Generating test statistics with simfix()","title":"Computing p-values for Fleming-Harring weighted logrank tests and the MaxCombo test","text":"begin single trial simulation generated routine simfix() using default arguments routine. simfix() produces one record per test data cutoff method per simulation. choose 3 tests (logrank=FH(0,0), FH(0,1) FH(1,1)). one test chosen correlation tests computed shown Karrison (2016), case columns V1, V2, V3. columns rho, gamma indicate \\(\\rho\\) \\(\\gamma\\) used compute test. Z FH(\\(\\rho,\\gamma\\)) normal test statistic variance 1 negative value favoring experimental treatment. variable cut indicates data cut analysis, case maximum targeted minimum follow-last enrollment date targeted event count reached. Sim sequential index simulations performed. format, MaxCombo p-value per Karrison (2016), Roychoudhury et al. (2019) can computed follows (note need package mvtnorm installed):","code":"library(simtrial) library(knitr) library(dplyr) x <- simfix(nsim = 1, timingType = 5, rg = tibble::tibble(rho = c(0, 0, 1), gamma = c(0, 1, 1))) #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. #> Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. x %>% kable(digits = 2) pMaxCombo(x) #> [1] 7.391765e-05"},{"path":"https://merck.github.io/simtrial/articles/pMaxComboVignette.html","id":"generating-data-with-simtrialsimpwsurv","dir":"Articles","previous_headings":"Executing for a single dataset","what":"Generating data with simtrial::simPWSurv()","title":"Computing p-values for Fleming-Harring weighted logrank tests and the MaxCombo test","text":"begin another simulation generated simtrial::simPWSurv(). , use defaults routine. generated, need cut data analysis. cut 75 events. Now can analyze data. begin s show can done single line. case, use 4 test combination suggested Lin et al. (2019), Roychoudhury et al. (2019). Now compute p-value : Suppose want p-value just based logrank FH(0,1) FH(1,0) suggested Lee (2007). remove rows columns associated FH(0,0) FH(1,1) apply pMaxCombo().","code":"s <- simPWSurv(n = 100) head(s) %>% kable(digits = 2) x <- s %>% cutDataAtCount(75) head(x) %>% kable(digits = 2) Z <- s %>%   cutDataAtCount(75) %>%   tensurv(txval = \"Experimental\") %>%   tenFHcorr(rg = tibble(rho = c(0, 0, 1, 1), gamma = c(0, 1, 0, 1))) Z %>% kable(digits = 2) pMaxCombo(Z) #> [1] 0.03007145 pMaxCombo(Z %>% select(-c(V1, V4)) %>% filter((rho == 0 & gamma == 1) | (rho == 1 & gamma == 0))) #> [1] 0.03427466"},{"path":"https://merck.github.io/simtrial/articles/pMaxComboVignette.html","id":"using-survival-data-in-another-format","dir":"Articles","previous_headings":"Executing for a single dataset","what":"Using survival data in another format","title":"Computing p-values for Fleming-Harring weighted logrank tests and the MaxCombo test","text":"trial generated simfix(), process slightly involved. consider survival data simtrial format show transformation needed. case use small aml dataset survival package. rename variables create stratum variable follows: Now analyze data MaxCombo logrank FH(0,1) compute p-value.","code":"library(survival) head(aml) %>% kable() x <- aml %>% transmute(tte = time, event = status, Stratum = \"All\", Treatment = as.character(x)) head(x) %>% kable() x %>%   tensurv(txval = \"Maintained\") %>%   tenFHcorr(rg = tibble(rho = 0, gamma = c(0, 1))) %>%   pMaxCombo() #> [1] 0.0491509"},{"path":"https://merck.github.io/simtrial/articles/pMaxComboVignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Computing p-values for Fleming-Harring weighted logrank tests and the MaxCombo test","text":"now consider example simulation pMaxCombo() help file demonstrate simulate power MaxCombo test. However, increase number simulations 100 case; larger number used (e.g., 1000) better estimate design properties. test \\(\\alpha=0.001\\) level. note use group_map produces list p-values simulation. nice something worked like dplyr::summarize() avoid unlist() allow evaluating, say, multiple data cutoff methods. latter can done without re-run simulations follows, demonstrated smaller number simulations. Now compute p-value separately cut type, first targeted event count. Now use later targeted events minimum follow-cutoffs.","code":"# Only use cut events + min follow-up xx <- simfix(nsim = 100, timingType = 5, rg = tibble(rho = c(0, 0, 1), gamma = c(0, 1, 1))) # MaxCombo power estimate for cutoff at max of targeted events, minimum follow-up p <- unlist(xx %>% group_by(Sim) %>% group_map(pMaxCombo)) mean(p < .001) #> [1] 0.84 # Only use cuts for events and events + min follow-up xx <- simfix(nsim = 100, timingType = c(2, 5), rg = tibble(rho = 0, gamma = c(0, 1))) head(xx) %>% kable(digits = 2) # Subset to targeted events cutoff tests p <- unlist(xx %>% filter(cut == \"Targeted events\") %>% group_by(Sim) %>% group_map(pMaxCombo)) mean(p < .025) #> [1] 0.96 # Subset to targeted events cutoff tests p <- unlist(xx %>% filter(cut != \"Targeted events\") %>% group_by(Sim) %>% group_map(pMaxCombo)) mean(p < .025) #> [1] 0.96"},{"path":"https://merck.github.io/simtrial/articles/pMaxComboVignette.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Computing p-values for Fleming-Harring weighted logrank tests and the MaxCombo test","text":"Fleming, Thomas R, David P Harrington. 2011. Counting Processes Survival Analysis. Vol. 169. John Wiley & Sons. Harrington, David P, Thomas R Fleming. 1982. “Class Rank Test Procedures Censored Survival Data.” Biometrika 69 (3): 553–66. Karrison, Theodore G. 2016. “Versatile Tests Comparing Survival Curves Based Weighted Log-Rank Statistics.” Stata Journal 15 (3): 678–90. Lee, Seung-Hwan. 2007. “Versatility Combination Weighted Log-Rank Statistics.” Computational Statistics & Data Analysis 51 (12): 6557–64. Lin, Ray S., Ji Lin, Satrajit Roychoudhury, Keaven M. Anderson, Tianle Hu, Bo Huang, Larry F Leon, et al. 2019. “Alternative Analysis Methods Time Event Endpoints Non-Proportional Hazards: Comparative Analysis.” Roychoudhury, Satrajit, Keaven M. Anderson, Jiabu Ye, Pralay Mukhopadhyay. 2019. “Robust Design Analysis Clinical Trials Non-Proportional Hazards: Straw Man Guidance Cross-Pharma Working Group.”","code":""},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Basic tools for time-to-event trial simulation and testing","text":"vignette demonstrates lower-level routines simtrial package specifically related trial generation statistical testing. routines follows: fixedBlockRand - fixed block randomization rpwenroll - random inter-arrival times piecewise constant enrollment rates rpwexp - piecewise exponential failure rate generation cutData - cut data analysis specified calendar time cutDataAtCount - cut data analysis specified event count, including ties cutoff date getCutDateForCount - find date event count reached tensurv - pre-process survival data counting process format Application demonstrated using higher-level routines simPWSurv() simfix() generate simulations weighted logrank analysis stratified design. intent write routines spirit tidyverse approach (alternately referred data wrangling, tidy data, R Data Science, split-apply-combine). objectives easily documentable validated package easy use efficient broadly-useful tool simulation time--event clinical trials. package extended many ways future, including: Weighted logrank weighted Kaplan-Meier analyses One-step, hazard ratio estimator (first-order approximation PH) Randomization schemes stratified, fixed-block Poisson mixture survival distribution generation","code":"library(simtrial) library(knitr) library(tibble) library(dplyr)"},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"randomization","dir":"Articles","previous_headings":"","what":"Randomization","title":"Basic tools for time-to-event trial simulation and testing","text":"Fixed block randomization arbitrary block contents performed demonstrated . case block size 5 one string repeated twice block three strings appearing . normally, default blocks size four:","code":"fixedBlockRand(n = 10, block = c(\"A\", \"Dog\", \"Cat\", \"Cat\")) #>  [1] \"Dog\" \"Cat\" \"A\"   \"Cat\" \"Cat\" \"A\"   \"Cat\" \"Dog\" \"Cat\" \"A\" fixedBlockRand(n = 20) #>  [1] 1 1 0 0 1 0 1 0 1 1 0 0 1 1 0 0 0 0 1 1"},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"enrollment","dir":"Articles","previous_headings":"","what":"Enrollment","title":"Basic tools for time-to-event trial simulation and testing","text":"Piecewise constant enrollment can randomly generated follows. Note duration specifies interval durations constant rates; final rate extended long needed generate specified number observations.","code":"rpwenroll(n = 20, enrollRates = tibble(   duration = c(1, 2),   rate = c(2, 5) )) #>  [1] 0.560297 1.473441 1.502885 1.661828 1.836482 1.846203 1.978374 2.042184 #>  [9] 2.144771 2.160189 2.166295 2.204301 2.770981 2.802212 2.885464 2.901886 #> [17] 3.160551 3.259782 3.435174 3.673959"},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"time-to-event-and-time-to-dropout","dir":"Articles","previous_headings":"","what":"Time-to-event and time-to-dropout","title":"Basic tools for time-to-event trial simulation and testing","text":"Time--event time--dropout random number generation observations generated piecewise exponential failure times. large number observations, log-plot time--failure","code":"x <- rpwexp(10000,   failRates = tibble(     rate = c(1, 3, 10),     duration = c(.5, .5, 1)   ) ) plot(sort(x), (10000:1) / 10001,   log = \"y\",   main = \"PW Exponential simulated survival curve\",   xlab = \"Time\", ylab = \"P{Survival}\" )"},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"generating-a-trial","dir":"Articles","previous_headings":"","what":"Generating a trial","title":"Basic tools for time-to-event trial simulation and testing","text":"Ideally, might done routine generation randomization, time--event data done modular fashion plugged general trial generation routine. now, stratified randomization, piecewise constant enrollment, fixed block randomization piecewise exponential failure rates support flexible set trial generation options time--event endpoint trials. present, follow format carefully little checking input developed -date. methods used demonstrated , combined single routine generate trial. Note generated output dataset, cte calendar time event dropout, whichever comes first, fail indicator cte represents event time. First set input variables make later call simPWSurv() straightforward read.","code":"strata <- tibble(Stratum = c(\"Negative\", \"Positive\"), p = c(.5, .5))  block <- c(rep(\"Control\", 2), rep(\"Experimental\", 2))  enrollRates <- tibble(rate = c(3, 6, 9), duration = c(3, 2, 1))  failRates <- tibble(   Stratum = c(rep(\"Negative\", 4), rep(\"Positive\", 4)),   period = rep(1:2, 4),   Treatment = rep(c(rep(\"Control\", 2), rep(\"Experimental\", 2)), 2),   duration = rep(c(3, 1), 4),   rate = log(2) / c(4, 9, 4.5, 10, 4, 9, 8, 18) ) dropoutRates <- tibble(   Stratum = c(rep(\"Negative\", 4), rep(\"Positive\", 4)),   period = rep(1:2, 4),   Treatment = rep(c(rep(\"Control\", 2), rep(\"Experimental\", 2)), 2),   duration = rep(c(3, 1), 4),   rate = rep(c(.001, .001), 4) ) x <- simPWSurv(   n = 400,   strata = strata,   block = block,   enrollRates = enrollRates,   failRates = failRates,   dropoutRates = dropoutRates ) head(x) %>% kable(digits = 2)"},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"cutting-data-for-analysis","dir":"Articles","previous_headings":"","what":"Cutting data for analysis","title":"Basic tools for time-to-event trial simulation and testing","text":"two ways cut data generated dataset x . first uses calendar cutoff date. output includes time randomization event dropout (tte), indicator represents event (event), stratum observation generated (Stratum) treatment group assigned (Treatment). Observations enrolled input cutDate deleted events censoring x cutDate censored specified cutDate. instance, wish cut entire dataset 50 events observed Positive stratum can use getCutDateForCount function follows: Perhaps common way cut data event count overall population, done using cutDataAtCount function. Note tied events date cte count reached, included. Also, count never reached, event times included cut - indication error.","code":"y <- cutData(x, cutDate = 5) head(y) %>% kable(digits = 2) cut50Positive <- getCutDateForCount(filter(x, Stratum == \"Positive\"), 50) y50Positive <- cutData(x, cut50Positive) with(y50Positive, table(Stratum, event)) #>           event #> Stratum     0  1 #>   Negative 48 76 #>   Positive 58 50 y150 <- cutDataAtCount(x, 150) table(y150$event, y150$Treatment) #>     #>     Control Experimental #>   0      42           56 #>   1      82           68"},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"generating-a-counting-process-dataset","dir":"Articles","previous_headings":"","what":"Generating a counting process dataset","title":"Basic tools for time-to-event trial simulation and testing","text":"cut data analysis, can create dataset simple use weighted logrank tests. slightly complex version developed future enable Kaplan-Meier-based tests. take dataset y150 process format. counting process format discussed next section compute weighted logrank test.","code":"ten150 <- tensurv(y150, txval = \"Experimental\") head(ten150) %>% kable(digits = 2)"},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"logrank-and-weighted-logrank-testing","dir":"Articles","previous_headings":"","what":"Logrank and weighted logrank testing","title":"Basic tools for time-to-event trial simulation and testing","text":"Now stratified logrank stratified weighted logrank tests easily generated based counting process format. record counting process dataset represents tte one events occurs; results stratum-specific. Included observation number events overall (events) experimental treatment group (txevents), number risk overall (atrisk) experimental treatment group (txatrisk) just tte, combined treatment group Kaplan-Meier survival estimate (left-continuous) tte, observed events experimental group minus expected tte based assumption risk observations equally likely event time, variance quantity (Var). generate stratified logrank test corresponding one-sided p-value, simply following: Fleming-Harrington \\(\\rho=1\\), \\(\\gamma=2\\) nearly simple. compute z-statistic corresponding one-sided p-value. Fleming-Harrington tests, routine built tests : wanted take minimum MaxCombo test, first use tenFHcorr compute correlation matrix Z-statistics follows. Note ordering rg g argument list opposite . correlation matrix Z-values now V1-V4. can compute p-value MaxCombo follows using pmvnorm function mvtnorm package. Note arguments GenzBretz stringent defaults; also used stringent parameters example help file.","code":"z <- with(ten150, sum(OminusE) / sqrt(sum(Var))) c(z, pnorm(z)) #> [1] -2.51403907  0.00596786 xx <- mutate(ten150, w = S * (1 - S)^2) z <- with(xx, sum(OminusE * w) / sum(sqrt(Var * w^2))) c(z, pnorm(z)) #> [1] -0.1443976  0.4425933 tenFH(x = ten150, rg = tibble(rho = c(0, 0, 1, 1), gamma = c(0, 1, 0, 1))) %>% kable(digits = 2) x <- ten150 %>% tenFHcorr(rg = tibble(rho = c(0, 0, 1, 1), gamma = c(0, 1, 0, 1))) #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. #> Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. x %>% kable(digits = 2) # Compute p-value for MaxCombo pMaxCombo(x) #> [1] 0.007413694"},{"path":"https://merck.github.io/simtrial/articles/simtrialroutines.html","id":"simplification-for-2-arm-trials","dir":"Articles","previous_headings":"","what":"Simplification for 2-arm trials","title":"Basic tools for time-to-event trial simulation and testing","text":"simfix() routine combines much go straight generating tests individual trials cutting data analyzing need done separately. argument structure meant simpler simPWSurv(). Now simulate trial 2 times cut data analysis based timingType = 1:5 translates : planned study duration, targeted event count achieved, planned minimum follow-enrollment complete, maximum 1 2, maximum 2 3. look carefully, asking cutoff planned number events different data cutoff methods. explain, note generally want sampleSize match enrollment specified enrollRates: targeted enrollment takes, average, 30 months longer sum enrollment durations enrollRates (14 months) input enrollment rates. achieve input sampleSize 500, final enrollment rate assumed steady state extends simulation targeted enrollment achieved. planned duration trial taken 30 months specified totalDuration. targeted minimum follow-thus, implicit last subject enrolled 16 months prior duration given cutoff “Minimum follow-” cutoff simulations . planned duration cutoff given totalDuration argument results much earlier cutoff.","code":"strata <- tibble(Stratum = \"All\", p = 1) enrollRates <- tibble(   duration = c(2, 2, 10),   rate = c(3, 6, 9) ) failRates <- tibble(   Stratum = \"All\",   duration = c(3, 100),   failRate = log(2) / c(9, 18),   hr = c(0.9, 0.6),   dropoutRate = rep(0.001, 2) ) block <- rep(c(\"Experimental\", \"Control\"), 2) rg <- tibble(rho = 0, gamma = 0) simfix(   nsim = 2, # Number of simulations   sampleSize = 500, # Trial sample size   targetEvents = 350, # Targeted events at analysis   strata = strata, # Study strata   enrollRates = enrollRates, # Enrollment rates   failRates = failRates, # Failure rates   totalDuration = 30, # Planned trial duration   block = block, # Block for treatment   timingType = 1:5, # Use all possible data cutoff methods   rg = rg # FH test(s) to use; in this case, logrank ) %>% kable(digits = 2) enrollRates %>% summarize(\"Targeted enrollment based on input enrollment rates\" = sum(duration * rate)) #> # A tibble: 1 × 1 #>   `Targeted enrollment based on input enrollment rates` #>                                                   <dbl> #> 1                                                   108 totalDuration <- 30 # From above totalDuration - sum(enrollRates$duration) #> [1] 16"},{"path":"https://merck.github.io/simtrial/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Keaven Anderson. Author. Yilong Zhang. Author, maintainer. Amin Shirazi. Contributor. Ruixue Wang. Contributor. Yi Cui. Contributor. Ping Yang. Contributor. Yalin Zhu. Contributor. Heng Zhou. Contributor. Merck Sharp & Dohme Corp. Copyright holder.","code":""},{"path":"https://merck.github.io/simtrial/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anderson K, Zhang Y (2022). simtrial: Clinical Trial Simulation. https://merck.github.io/simtrial/, https://github.com/Merck/simtrial.","code":"@Manual{,   title = {simtrial: Clinical Trial Simulation},   author = {Keaven Anderson and Yilong Zhang},   year = {2022},   note = {https://merck.github.io/simtrial/, https://github.com/Merck/simtrial}, }"},{"path":[]},{"path":"https://merck.github.io/simtrial/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clinical Trial Simulation","text":"can install GitHub:","code":"remotes::install_github(\"Merck/simtrial\")"},{"path":"https://merck.github.io/simtrial/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Clinical Trial Simulation","text":"simtrial small package built initially focus evaluating weighted logrank tests combination tests based tests. intent use tidyverse (data wrangling) programming procedures package easy qualify use regulated environment. Initial areas focus : Generating time--event data stratified trials using piecewise constant enrollment piecewise exponential failure rates. proportional non-proportional hazards supported. proportional hazards, assumptions along lines used Lachin Foulkes implemented gsDesign deriving group sequential designs. Setting data cutoffs (interim final) analyses. Support weighted logrank tests arbitrary weighting schemes, specifically supporting Fleming-Harrington set tests, including logrank test.","code":""},{"path":"https://merck.github.io/simtrial/index.html","id":"future-developments","dir":"","previous_headings":"","what":"Future developments","title":"Clinical Trial Simulation","text":"Expectations future development include: Provide test suite document package fit use regulatory environment. examples.","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex1delayedEffect.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-to-event data example 1 for non-proportional hazards working group — Ex1delayedEffect","title":"Time-to-event data example 1 for non-proportional hazards working group — Ex1delayedEffect","text":"Survival objects reverse-engineered datasets published Kaplan-Meier curves. Individual trials de-identified since data approximations actual data. Data intended evaluate methods designs trials non-proportional hazards may anticipated outcome data.","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex1delayedEffect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-to-event data example 1 for non-proportional hazards working group — Ex1delayedEffect","text":"","code":"data(Ex1delayedEffect)"},{"path":"https://merck.github.io/simtrial/reference/Ex1delayedEffect.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time-to-event data example 1 for non-proportional hazards working group — Ex1delayedEffect","text":"Data frame 4 variables: id sequential numbering unique identifiers month time--event event 1 event, 0 censored trt 1 experimental, 0 control","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex1delayedEffect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time-to-event data example 1 for non-proportional hazards working group — Ex1delayedEffect","text":"TBD","code":""},{"path":[]},{"path":"https://merck.github.io/simtrial/reference/Ex1delayedEffect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-to-event data example 1 for non-proportional hazards working group — Ex1delayedEffect","text":"","code":"library(survival) data(Ex1delayedEffect) km1 <- with(Ex1delayedEffect,survfit(Surv(month,evntd)~trt)) km1 #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>         n events median 0.95LCL 0.95UCL #> trt=0 121     86   5.04    4.18    6.21 #> trt=1 240    132   7.66    6.54    9.48 plot(km1)  with(subset(Ex1delayedEffect,trt==1),survfit(Surv(month,evntd)~trt)) #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>        n events median 0.95LCL 0.95UCL #> [1,] 240    132   7.66    6.54    9.48 with(subset(Ex1delayedEffect,trt==0),survfit(Surv(month,evntd)~trt)) #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>        n events median 0.95LCL 0.95UCL #> [1,] 121     86   5.04    4.18    6.21"},{"path":"https://merck.github.io/simtrial/reference/Ex2delayedEffect.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-to-event data example 2 for non-proportional hazards working group — Ex2delayedEffect","title":"Time-to-event data example 2 for non-proportional hazards working group — Ex2delayedEffect","text":"Survival objects reverse-engineered datasets published Kaplan-Meier curves. Individual trials de-identified since data approximations actual data. Data intended evaluate methods designs trials non-proportional hazards may anticipated outcome data.","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex2delayedEffect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-to-event data example 2 for non-proportional hazards working group — Ex2delayedEffect","text":"","code":"data(Ex2delayedEffect)"},{"path":"https://merck.github.io/simtrial/reference/Ex2delayedEffect.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time-to-event data example 2 for non-proportional hazards working group — Ex2delayedEffect","text":"Data frame 4 variables: id sequential numbering unique identifiers month time--event event 1 event, 0 censored trt 1 experimental, 0 control","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex2delayedEffect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time-to-event data example 2 for non-proportional hazards working group — Ex2delayedEffect","text":"TBD","code":""},{"path":[]},{"path":"https://merck.github.io/simtrial/reference/Ex2delayedEffect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-to-event data example 2 for non-proportional hazards working group — Ex2delayedEffect","text":"","code":"library(survival) data(Ex2delayedEffect) km1 <- with(Ex2delayedEffect,survfit(Surv(month,evntd)~trt)) km1 #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>         n events median 0.95LCL 0.95UCL #> trt=0 137    123   2.84    2.18    3.50 #> trt=1 135    105   3.45    2.13    5.07 plot(km1)  with(subset(Ex2delayedEffect,trt==1),survfit(Surv(month,evntd)~trt)) #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>        n events median 0.95LCL 0.95UCL #> [1,] 135    105   3.45    2.13    5.07 with(subset(Ex2delayedEffect,trt==0),survfit(Surv(month,evntd)~trt)) #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>        n events median 0.95LCL 0.95UCL #> [1,] 137    123   2.84    2.18     3.5"},{"path":"https://merck.github.io/simtrial/reference/Ex3curewithph.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-to-event data example 3 for non-proportional hazards working group — Ex3curewithph","title":"Time-to-event data example 3 for non-proportional hazards working group — Ex3curewithph","text":"Survival objects reverse-engineered datasets published Kaplan-Meier curves. Individual trials de-identified since data approximations actual data. Data intended evaluate methods designs trials non-proportional hazards may anticipated outcome data.","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex3curewithph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-to-event data example 3 for non-proportional hazards working group — Ex3curewithph","text":"","code":"data(Ex3curewithph)"},{"path":"https://merck.github.io/simtrial/reference/Ex3curewithph.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time-to-event data example 3 for non-proportional hazards working group — Ex3curewithph","text":"Data frame 4 variables: id sequential numbering unique identifiers month time--event event 1 event, 0 censored trt 1 experimental, 0 control","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex3curewithph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time-to-event data example 3 for non-proportional hazards working group — Ex3curewithph","text":"TBD","code":""},{"path":[]},{"path":"https://merck.github.io/simtrial/reference/Ex3curewithph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-to-event data example 3 for non-proportional hazards working group — Ex3curewithph","text":"","code":"library(survival) data(Ex3curewithph) km1 <- with(Ex3curewithph,survfit(Surv(month,evntd)~trt)) km1 #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>         n events median 0.95LCL 0.95UCL #> trt=0 137    101   1.05   0.523    1.74 #> trt=1 143     86   1.74   1.158    3.13 plot(km1)"},{"path":"https://merck.github.io/simtrial/reference/Ex4belly.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-to-event data example 4 for non-proportional hazards working group — Ex4belly","title":"Time-to-event data example 4 for non-proportional hazards working group — Ex4belly","text":"Survival objects reverse-engineered datasets published Kaplan-Meier curves. Individual trials de-identified since data approximations actual data. Data intended evaluate methods designs trials non-proportional hazards may anticipated outcome data.","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex4belly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-to-event data example 4 for non-proportional hazards working group — Ex4belly","text":"","code":"data(Ex4belly)"},{"path":"https://merck.github.io/simtrial/reference/Ex4belly.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time-to-event data example 4 for non-proportional hazards working group — Ex4belly","text":"Data frame 4 variables: id sequential numbering unique identifiers month time--event event 1 event, 0 censored trt 1 experimental, 0 control","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex4belly.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time-to-event data example 4 for non-proportional hazards working group — Ex4belly","text":"TBD","code":""},{"path":[]},{"path":"https://merck.github.io/simtrial/reference/Ex4belly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-to-event data example 4 for non-proportional hazards working group — Ex4belly","text":"","code":"library(survival) data(Ex4belly) km1 <- with(Ex4belly,survfit(Surv(month,evntd)~trt)) km1 #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>         n events median 0.95LCL 0.95UCL #> trt=0 387    339   5.40    4.61    5.55 #> trt=1 387    327   6.42    5.81    6.91 plot(km1)"},{"path":"https://merck.github.io/simtrial/reference/Ex5widening.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-to-event data example 5 for non-proportional hazards working group — Ex5widening","title":"Time-to-event data example 5 for non-proportional hazards working group — Ex5widening","text":"Survival objects reverse-engineered datasets published Kaplan-Meier curves. Individual trials de-identified since data approximations actual data. Data intended evaluate methods designs trials non-proportional hazards may anticipated outcome data.","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex5widening.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-to-event data example 5 for non-proportional hazards working group — Ex5widening","text":"","code":"data(Ex5widening)"},{"path":"https://merck.github.io/simtrial/reference/Ex5widening.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time-to-event data example 5 for non-proportional hazards working group — Ex5widening","text":"Data frame 4 variables: id sequential numbering unique identifiers month time--event event 1 event, 0 censored trt 1 experimental, 0 control","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex5widening.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time-to-event data example 5 for non-proportional hazards working group — Ex5widening","text":"TBD","code":""},{"path":[]},{"path":"https://merck.github.io/simtrial/reference/Ex5widening.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-to-event data example 5 for non-proportional hazards working group — Ex5widening","text":"","code":"library(survival) data(Ex5widening) km1 <- with(Ex5widening,survfit(Surv(month,evntd)~trt)) km1 #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>        n events median 0.95LCL 0.95UCL #> trt=0 79     65   8.16    6.65    10.3 #> trt=1 86     48  19.97   17.07    26.6 plot(km1)"},{"path":"https://merck.github.io/simtrial/reference/Ex6crossing.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-to-event data example 6 for non-proportional hazards working group — Ex6crossing","title":"Time-to-event data example 6 for non-proportional hazards working group — Ex6crossing","text":"Survival objects reverse-engineered datasets published Kaplan-Meier curves. Individual trials de-identified since data approximations actual data. Data intended evaluate methods designs trials non-proportional hazards may anticipated outcome data.","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex6crossing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-to-event data example 6 for non-proportional hazards working group — Ex6crossing","text":"","code":"data(Ex6crossing)"},{"path":"https://merck.github.io/simtrial/reference/Ex6crossing.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Time-to-event data example 6 for non-proportional hazards working group — Ex6crossing","text":"Data frame 4 variables: id sequential numbering unique identifiers month time--event event 1 event, 0 censored trt 1 experimental, 0 control","code":""},{"path":"https://merck.github.io/simtrial/reference/Ex6crossing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Time-to-event data example 6 for non-proportional hazards working group — Ex6crossing","text":"TBD","code":""},{"path":[]},{"path":"https://merck.github.io/simtrial/reference/Ex6crossing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-to-event data example 6 for non-proportional hazards working group — Ex6crossing","text":"","code":"library(survival) data(Ex6crossing) km1 <- with(Ex6crossing,survfit(Surv(month,evntd)~trt)) km1 #> Call: survfit(formula = Surv(month, evntd) ~ trt) #>  #>         n events median 0.95LCL 0.95UCL #> trt=0 145    111  10.66    8.83    12.5 #> trt=1 145    113   9.92    7.38    14.3 plot(km1)"},{"path":"https://merck.github.io/simtrial/reference/MBdelayed.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated survival dataset with delayed treatment effect — MBdelayed","title":"Simulated survival dataset with delayed treatment effect — MBdelayed","text":"Magirr Burman (2019) considered several scenarios modestly weighted logrank test. One delayed treatment effect hazard ratio 1 6 months followed hazard ratio 1/2 thereafter. scenario enrolled 200 patients uniformly 12 months cut data analysis 36 months enrollment opened. dataset generated simtrial::simPWSurv() function scenario.","code":""},{"path":"https://merck.github.io/simtrial/reference/MBdelayed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated survival dataset with delayed treatment effect — MBdelayed","text":"","code":"MBdelayed"},{"path":"https://merck.github.io/simtrial/reference/MBdelayed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated survival dataset with delayed treatment effect — MBdelayed","text":"tibble 200 rows xx columns tte time event","code":""},{"path":"https://merck.github.io/simtrial/reference/MBdelayed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated survival dataset with delayed treatment effect — MBdelayed","text":"Magirr, Dominic, Carl‐Fredrik Burman. \"Modestly weighted logrank tests.\" Statistics Medicine 38.20 (2019): 3782-3790.","code":""},{"path":"https://merck.github.io/simtrial/reference/MBdelayed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated survival dataset with delayed treatment effect — MBdelayed","text":"","code":"library(tidyr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(survival) library(mvtnorm) fit <- survfit(Surv(tte, event) ~ Treatment, data = MBdelayed)  # Plot survival plot(fit, lty=1:2)  legend(\"topright\", legend = c(\"Control\", \"Experimental\"), lty = 1:2)   # Set up time, event, number of event dataset for testing # with arbitrary weights ten <- MBdelayed %>% tensurv(txval = \"Experimental\") head(ten) #> # A tibble: 6 × 9 #> # Groups:   Stratum [1] #>   Stratum events txevents    tte atrisk txatrisk     S OminusE   Var #>   <chr>    <dbl>    <dbl>  <dbl>  <dbl>    <int> <dbl>   <dbl> <dbl> #> 1 All          1        1 0.0917    200      100 1       0.5   0.25  #> 2 All          1        1 0.181     199       99 0.995   0.503 0.250 #> 3 All          1        1 0.322     198       98 0.99    0.505 0.250 #> 4 All          1        0 0.330     197       97 0.985  -0.492 0.250 #> 5 All          1        0 0.597     196       97 0.98   -0.495 0.250 #> 6 All          1        0 0.755     195       97 0.975  -0.497 0.250  # MaxCombo with logrank, FH(0,1), FH(1,1) ten %>% tenFHcorr(rg=tibble(rho=c(0, 0, 1), gamma=c(0, 1, 1))) %>%         pMaxCombo() #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0. #> Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. #> [1] 0.001054808  # Magirr-Burman modestly down-weighted rank test with 6 month delay # First, add weights ten <- ten %>% wMB(6) head(ten) #> # A tibble: 6 × 10 #>   Stratum events txevents    tte atrisk txatrisk     S OminusE   Var   wMB #>   <chr>    <dbl>    <dbl>  <dbl>  <dbl>    <int> <dbl>   <dbl> <dbl> <dbl> #> 1 All          1        1 0.0917    200      100 1       0.5   0.25   1    #> 2 All          1        1 0.181     199       99 0.995   0.503 0.250  1.01 #> 3 All          1        1 0.322     198       98 0.99    0.505 0.250  1.01 #> 4 All          1        0 0.330     197       97 0.985  -0.492 0.250  1.02 #> 5 All          1        0 0.597     196       97 0.98   -0.495 0.250  1.02 #> 6 All          1        0 0.755     195       97 0.975  -0.497 0.250  1.03  # Now compute test based on these weights ten %>% summarise(S = sum(OminusE*wMB),                   V = sum(Var*wMB^2),                   Z = S/sqrt(V)) %>%         mutate(p=pnorm(Z)) #> # A tibble: 1 × 4 #>       S     V     Z       p #>   <dbl> <dbl> <dbl>   <dbl> #> 1 -20.4  55.3 -2.74 0.00304  # Create 0 weights for first 6 months ten <- ten %>% mutate(w6 = 1 * (tte >= 6)) ten %>% summarise(S = sum(OminusE*w6),                   V = sum(Var*w6^2),                   Z = S/sqrt(V)) %>%          mutate(p=pnorm(Z)) #> # A tibble: 1 × 4 #>       S     V     Z        p #>   <dbl> <dbl> <dbl>    <dbl> #> 1 -16.8  21.5 -3.62 0.000147          # Generate another dataset ds <- simPWSurv(n = 200,                 enrollRates = tibble(rate = 200 / 12, duration = 12),                 failRates = tribble(                    ~Stratum, ~Period, ~Treatment,     ~duration, ~rate,                    \"All\",        1,   \"Control\",      42,        log(2) / 15,                    \"All\",        1,   \"Experimental\", 6,         log(2) / 15,                    \"All\",        2,   \"Experimental\", 36,        log(2) / 15 * 0.6),                 dropoutRates = tribble(                    ~Stratum, ~Period, ~Treatment,     ~duration, ~rate,                    \"All\",        1,   \"Control\",      42,        0,                    \"All\",        1,   \"Experimental\", 42,        0)        ) # Cut data at 24 months after final enrollment MBdelayed2 <- ds %>% cutData(max(ds$enrollTime) + 24)"},{"path":"https://merck.github.io/simtrial/reference/cutData.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a Dataset for Analysis at a Specified Date — cutData","title":"Cut a Dataset for Analysis at a Specified Date — cutData","text":"Cut Dataset Analysis Specified Date","code":""},{"path":"https://merck.github.io/simtrial/reference/cutData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a Dataset for Analysis at a Specified Date — cutData","text":"","code":"cutData(x, cutDate)"},{"path":"https://merck.github.io/simtrial/reference/cutData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a Dataset for Analysis at a Specified Date — cutData","text":"x time--event dataset, e.g., generated simPWSurv cutDate date relative start randomization (cte input dataset) dataset cut analysis","code":""},{"path":"https://merck.github.io/simtrial/reference/cutData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a Dataset for Analysis at a Specified Date — cutData","text":"dataset ready survival analysis","code":""},{"path":"https://merck.github.io/simtrial/reference/cutData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a Dataset for Analysis at a Specified Date — cutData","text":"","code":"# Use default enrollment and event rates and cut at calendar time 5 after start # of randomization library(dplyr) simPWSurv(n=20) %>% cutData(5) #> # A tibble: 20 × 4 #> # Groups:   Stratum, Treatment [2] #>      tte event Stratum Treatment    #>    <dbl> <dbl> <chr>   <chr>        #>  1 1.18      1 All     Experimental #>  2 0.702     1 All     Experimental #>  3 4.42      0 All     Control      #>  4 3.46      1 All     Control      #>  5 3.72      0 All     Experimental #>  6 1.55      1 All     Control      #>  7 3.33      0 All     Control      #>  8 3.01      0 All     Experimental #>  9 2.80      0 All     Control      #> 10 2.76      0 All     Control      #> 11 2.51      0 All     Experimental #> 12 1.94      1 All     Experimental #> 13 2.45      0 All     Control      #> 14 2.40      1 All     Experimental #> 15 2.39      0 All     Experimental #> 16 0.225     1 All     Control      #> 17 2.28      0 All     Experimental #> 18 2.23      0 All     Control      #> 19 2.13      0 All     Control      #> 20 2.13      0 All     Experimental"},{"path":"https://merck.github.io/simtrial/reference/cutDataAtCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a Dataset for Analysis at a Specified Event Count — cutDataAtCount","title":"Cut a Dataset for Analysis at a Specified Event Count — cutDataAtCount","text":"cutDataAtCount takes time--event data set cuts data event count reached.","code":""},{"path":"https://merck.github.io/simtrial/reference/cutDataAtCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a Dataset for Analysis at a Specified Event Count — cutDataAtCount","text":"","code":"cutDataAtCount(x, count)"},{"path":"https://merck.github.io/simtrial/reference/cutDataAtCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a Dataset for Analysis at a Specified Event Count — cutDataAtCount","text":"x time--event dataset, e.g., generated simPWSurv count event count data cutoff made","code":""},{"path":"https://merck.github.io/simtrial/reference/cutDataAtCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a Dataset for Analysis at a Specified Event Count — cutDataAtCount","text":"tibble ready survival analysis, including culumns time event (tte), event, stratum treatment.","code":""},{"path":"https://merck.github.io/simtrial/reference/cutDataAtCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a Dataset for Analysis at a Specified Event Count — cutDataAtCount","text":"","code":"library(tidyr) # Use default enrollment and event rates at cut at 100 events x <- simPWSurv(n=200) %>% cutDataAtCount(100) table(x$event,x$Treatment) #>     #>     Control Experimental #>   0      42           58 #>   1      58           42"},{"path":"https://merck.github.io/simtrial/reference/fixedBlockRand.html","id":null,"dir":"Reference","previous_headings":"","what":"Permuted fixed block randomization — fixedBlockRand","title":"Permuted fixed block randomization — fixedBlockRand","text":"Fixed block randomization. block input repeat treatment code number times included within block. final block partial block n exact multiple block length.","code":""},{"path":"https://merck.github.io/simtrial/reference/fixedBlockRand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permuted fixed block randomization — fixedBlockRand","text":"","code":"fixedBlockRand(n = 10, block = c(0, 0, 1, 1))"},{"path":"https://merck.github.io/simtrial/reference/fixedBlockRand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permuted fixed block randomization — fixedBlockRand","text":"n sample size randomized block Vector treatments included block","code":""},{"path":"https://merck.github.io/simtrial/reference/fixedBlockRand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permuted fixed block randomization — fixedBlockRand","text":"treatment group sequence (vector) length n treatments block permuted within block block size equal length block","code":""},{"path":"https://merck.github.io/simtrial/reference/fixedBlockRand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permuted fixed block randomization — fixedBlockRand","text":"","code":"library(dplyr) # 2:1 randomization with block size 3, treatments \"A\" and \"B\" tibble(x=1:10) %>% mutate(Treatment=fixedBlockRand(block=c(\"A\",\"B\",\"B\"))) #> # A tibble: 10 × 2 #>        x Treatment #>    <int> <chr>     #>  1     1 B         #>  2     2 B         #>  3     3 A         #>  4     4 B         #>  5     5 B         #>  6     6 A         #>  7     7 A         #>  8     8 B         #>  9     9 B         #> 10    10 B         # Stratified randomization tibble(Stratum=c(rep(\"A\",10),rep(\"B\",10))) %>% group_by(Stratum) %>% mutate(Treatment=fixedBlockRand()) #> # A tibble: 20 × 2 #> # Groups:   Stratum [2] #>    Stratum Treatment #>    <chr>       <dbl> #>  1 A               0 #>  2 A               1 #>  3 A               1 #>  4 A               0 #>  5 A               1 #>  6 A               0 #>  7 A               1 #>  8 A               0 #>  9 A               0 #> 10 A               1 #> 11 B               1 #> 12 B               1 #> 13 B               0 #> 14 B               0 #> 15 B               1 #> 16 B               1 #> 17 B               0 #> 18 B               0 #> 19 B               0 #> 20 B               1"},{"path":"https://merck.github.io/simtrial/reference/getCutDateForCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Date at Which an Event Count is Reached — getCutDateForCount","title":"Get Date at Which an Event Count is Reached — getCutDateForCount","text":"Get Date Event Count Reached","code":""},{"path":"https://merck.github.io/simtrial/reference/getCutDateForCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Date at Which an Event Count is Reached — getCutDateForCount","text":"","code":"getCutDateForCount(x, count)"},{"path":"https://merck.github.io/simtrial/reference/getCutDateForCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Date at Which an Event Count is Reached — getCutDateForCount","text":"x time--event dataset, e.g., generated simPWSurv count event count dataset cut analysis","code":""},{"path":"https://merck.github.io/simtrial/reference/getCutDateForCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Date at Which an Event Count is Reached — getCutDateForCount","text":"numeric value cte input dataset targeted event count reached, final event count never reached, final cte event occurs.","code":""},{"path":"https://merck.github.io/simtrial/reference/getCutDateForCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Date at Which an Event Count is Reached — getCutDateForCount","text":"","code":"library(dplyr) # Use default enrollment and calendar cut date for 50 events in Positive stratum x <- simPWSurv(n=200,                strata = tibble::tibble(Stratum=c(\"Positive\",\"Negative\"), p = c(.5, .5)),                failRates = tibble::tibble(Stratum = rep(c(\"Positive\",\"Negative\"),2),                                           period = rep(1, 4),                                           Treatment = c(rep(\"Control\", 2),                                                          rep(\"Experimental\", 2)),                                           duration = rep(1, 4),                                           rate = log(2) / c(6, 9, 9, 12)                                           ),                dropoutRates = tibble::tibble(Stratum = rep(c(\"Positive\",\"Negative\"),2),                                              period = rep(1, 4),                                              Treatment = c(rep(\"Control\", 2),                                                             rep(\"Experimental\", 2)),                                              duration = rep(1, 4),                                              rate = rep(.001, 4)                                             )               ) d <- getCutDateForCount(filter(x,Stratum==\"Positive\"),count=50) y <- cutData(x,cutDate=d) table(y$Stratum,y$event) #>            #>             0  1 #>   Negative 54 56 #>   Positive 34 50"},{"path":"https://merck.github.io/simtrial/reference/pMaxCombo.html","id":null,"dir":"Reference","previous_headings":"","what":"MaxCombo p-value — pMaxCombo","title":"MaxCombo p-value — pMaxCombo","text":"pMaxCombo() computes p-values MaxCombo test based output simtrial::tenFHcorr(). still experimental stage intended use simtrial::simfix() trial simulation routine. However, can also used analyze clinical trial data provided ADaM ADTTE format.","code":""},{"path":"https://merck.github.io/simtrial/reference/pMaxCombo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MaxCombo p-value — pMaxCombo","text":"","code":"pMaxCombo(Z, dummyvar, algorithm = GenzBretz(maxpts = 50000, abseps = 1e-05))"},{"path":"https://merck.github.io/simtrial/reference/pMaxCombo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MaxCombo p-value — pMaxCombo","text":"Z dataset output tenFHcorr(); see examples. dummyvar dummy input allows group_map() used compute p-values multiple simulations. algorithm passed directly algorithm argument mvtnorm::pmvnorm()","code":""},{"path":"https://merck.github.io/simtrial/reference/pMaxCombo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MaxCombo p-value — pMaxCombo","text":"numeric p-value","code":""},{"path":"https://merck.github.io/simtrial/reference/pMaxCombo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MaxCombo p-value — pMaxCombo","text":"","code":"library(tidyr) x <- simfix(nsim=1,timingType=5,rg=tibble::tibble(rho=c(0,0,1),gamma=c(0,1,1))) head(x) #>   Events       lnhr rho gamma         Z        V1        V2        V3 #> 1    361 -0.3322218   0     0 -3.146791 1.0000000 0.8571103 0.9347641 #> 2    361 -0.3322218   0     1 -3.318562 0.8571103 1.0000000 0.9379794 #> 3    361 -0.3322218   1     1 -3.798803 0.9347641 0.9379794 1.0000000 #>                             cut Duration Sim #> 1 Max(min follow-up, event cut) 72.16034   1 #> 2 Max(min follow-up, event cut) 72.16034   1 #> 3 Max(min follow-up, event cut) 72.16034   1 pMaxCombo(x) #> [1] 7.351073e-05 # Only use cuts for events, events + min follow-up xx <- simfix(nsim=100,timingType=5,rg=tibble::tibble(rho=c(0,0,1),gamma=c(0,1,1))) head(xx) #>   Events       lnhr rho gamma         Z        V1        V2        V3 #> 1    370 -0.3088979   0     0 -2.961613 1.0000000 0.8560167 0.9356853 #> 2    370 -0.3088979   0     1 -3.221966 0.8560167 1.0000000 0.9283988 #> 3    370 -0.3088979   1     1 -3.514724 0.9356853 0.9283988 1.0000000 #> 4    350 -0.4692477   0     0 -4.356558 1.0000000 0.8549328 0.9321061 #> 5    350 -0.4692477   0     1 -4.874285 0.8549328 1.0000000 0.9425538 #> 6    350 -0.4692477   1     1 -4.712256 0.9321061 0.9425538 1.0000000 #>                             cut Duration Sim #> 1 Max(min follow-up, event cut) 75.02873   1 #> 2 Max(min follow-up, event cut) 75.02873   1 #> 3 Max(min follow-up, event cut) 75.02873   1 #> 4 Max(min follow-up, event cut) 71.81227   2 #> 5 Max(min follow-up, event cut) 71.81227   2 #> 6 Max(min follow-up, event cut) 71.81227   2 # MaxCombo power estimate for cutoff at max of targeted events, minimum follow-up p <- unlist(xx %>%  dplyr::group_by(Sim) %>% dplyr::group_map(pMaxCombo)) mean(p<.025) #> [1] 0.98"},{"path":"https://merck.github.io/simtrial/reference/pwexpfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise exponential survival estimation — pwexpfit","title":"Piecewise exponential survival estimation — pwexpfit","text":"Computes survival function, density function, -2*log-likelihood based input dataset intervals piecewise constant failure rates. Initial version assumes observations right censored events .","code":""},{"path":"https://merck.github.io/simtrial/reference/pwexpfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piecewise exponential survival estimation — pwexpfit","text":"","code":"pwexpfit(   Srv = Surv(time = Ex1delayedEffect$month, event = Ex1delayedEffect$evntd),   intervals = array(3, 3) )"},{"path":"https://merck.github.io/simtrial/reference/pwexpfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Piecewise exponential survival estimation — pwexpfit","text":"Srv input survival object (see Surv); note 0=censored, 1=event Surv intervals Vector containing positive values indicating interval lengths exponential rates assumed. Note final infinite interval added events occur final interval specified.","code":""},{"path":"https://merck.github.io/simtrial/reference/pwexpfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Piecewise exponential survival estimation — pwexpfit","text":"matrix rows containing interval length, estimated rate, -2*log-likelihood interval.","code":""},{"path":"https://merck.github.io/simtrial/reference/pwexpfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piecewise exponential survival estimation — pwexpfit","text":"","code":"# use default arguments for delayed effect example dataset (Ex1delayedEffect) library(survival) rateall <- pwexpfit() rateall #>   intervals     TTOT events       rate     m2ll #> 1         3 937.1785     97 0.10350216 634.0236 #> 2         3 605.3572     71 0.11728612 446.3257 #> 3         3 346.8482     30 0.08649317 206.8614 #> 4       Inf 254.1148     20 0.07870458 141.6822 # Estimate by treatment effect rate1 <- with(subset(Ex1delayedEffect,trt==1), pwexpfit(Surv(month,evntd))) rate0 <- with(subset(Ex1delayedEffect,trt==0), pwexpfit(Surv(month,evntd))) rate1 #>   intervals     TTOT events       rate      m2ll #> 1         3 620.4375     64 0.10315302 418.75734 #> 2         3 415.8482     36 0.08657005 248.16970 #> 3         3 256.2053     19 0.07415927 136.85853 #> 4       Inf 205.4186     13 0.06328542  97.76261 rate0 #>   intervals      TTOT events      rate      m2ll #> 1         3 316.74106     33 0.1041861 215.26408 #> 2         3 189.50899     35 0.1846878 188.23619 #> 3         3  90.64288     11 0.1213554  68.39871 #> 4       Inf  48.69624      7 0.1437483  41.15568 rate1$rate/rate0$rate #> [1] 0.9900847 0.4687372 0.6110917 0.4402517 # chi-square test for (any) treatment effect (8 - 4 parameters = 4 df) pchisq(sum(rateall$m2ll)-sum(rate1$m2ll+rate0$m2ll), df = 4, lower.tail=FALSE) #> [1] 0.006424744 # compare with logrank survdiff(formula = Surv(month, evntd) ~ trt, data = Ex1delayedEffect) #> Call: #> survdiff(formula = Surv(month, evntd) ~ trt, data = Ex1delayedEffect) #>  #>         N Observed Expected (O-E)^2/E (O-E)^2/V #> trt=0 121       86     67.7      4.97      7.35 #> trt=1 240      132    150.3      2.24      7.35 #>  #>  Chisq= 7.3  on 1 degrees of freedom, p= 0.007  # simple model with 3 rates same for each for 3 months,  # different for each treatment after months rate1a <- with(subset(Ex1delayedEffect,trt==1), pwexpfit(Surv(month,evntd),3)) rate0a <- with(subset(Ex1delayedEffect,trt==0), pwexpfit(Surv(month,evntd),3)) rate1a$rate/rate0a$rate #> [1] 0.9900847 0.4808339 m2ll0 <- rateall$m2ll[1]+rate1a$m2ll[2]+rate0a$m2ll[2] m2ll1 <- sum(rate0$m2ll)+sum(rate1$m2ll) # as a measure of strength, chi-square examines improvement in likelihood pchisq(m2ll0-m2ll1, 5, lower.tail=FALSE) #> [1] 0.741822"},{"path":"https://merck.github.io/simtrial/reference/rpwenroll.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Piecewise Exponential Enrollment — rpwenroll","title":"Generate Piecewise Exponential Enrollment — rpwenroll","text":"piecewise exponential enrollment rate generation enrollment rate distribution can easily approximated. rpwenroll() support simulation Lachin Foulkes (1986) sample size method (fixed trial duration) well Kim Tsiatis(1990) method (fixed enrollment rates either fixed enrollment duration fixed minimum follow-); see gsDesign.","code":""},{"path":"https://merck.github.io/simtrial/reference/rpwenroll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Piecewise Exponential Enrollment — rpwenroll","text":"","code":"rpwenroll(   n = NULL,   enrollRates = tibble::tibble(duration = c(1, 2), rate = c(2, 5)) )"},{"path":"https://merck.github.io/simtrial/reference/rpwenroll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Piecewise Exponential Enrollment — rpwenroll","text":"n Number observations. Default NULL yields random enrollment size. enrollRates tibble containing period duration (duration) enrollment rate (rate) specified enrollment periods. necessary, last period extended ensure enrollment specified n.","code":""},{"path":"https://merck.github.io/simtrial/reference/rpwenroll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Piecewise Exponential Enrollment — rpwenroll","text":"vector random enrollment times.","code":""},{"path":"https://merck.github.io/simtrial/reference/rpwenroll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Piecewise Exponential Enrollment — rpwenroll","text":"","code":"# piecewise uniform (piecewise exponential inter-arrival times) for 10k patients enrollment # enrollment rates of 5 for time 0-100, 15 for 100-300, and 30 thereafter x <- rpwenroll(n=10000, enrollRates=tibble::tibble(rate = c(5, 15, 30), duration = c(100,200,100))) plot(x,1:10000,      main=\"Piecewise uniform enrollment simulation\",xlab=\"Time\",      ylab=\"Enrollment\")  # exponential enrollment x <- rpwenroll(10000, enrollRates=tibble::tibble(rate = .03, duration = 1)) plot(x,1:10000,main=\"Simulated exponential inter-arrival times\",      xlab=\"Time\",ylab=\"Enrollment\")"},{"path":"https://merck.github.io/simtrial/reference/rpwexp.html","id":null,"dir":"Reference","previous_headings":"","what":"The Piecewise Exponential Distribution — rpwexp","title":"The Piecewise Exponential Distribution — rpwexp","text":"piecewise exponential distribution allows simple method specify distribtuion hazard rate changes time. likely useful conditions failure rates change, also simulations may delayed treatment effect treatment effect otherwise changing (e.g., decreasing) time. rpwexp() support simulation Lachin Foulkes (1986) sample size method (fixed trial duration) well Kim Tsiatis(1990) method (fixed enrollment rates either fixed enrollment duration fixed minimum follow-); see gsDesign.","code":""},{"path":"https://merck.github.io/simtrial/reference/rpwexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Piecewise Exponential Distribution — rpwexp","text":"","code":"rpwexp(n = 100, failRates = tibble(duration = c(1, 1), rate = c(10, 20)))"},{"path":"https://merck.github.io/simtrial/reference/rpwexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Piecewise Exponential Distribution — rpwexp","text":"n Number observations generated. failRates tibble containing duration rate variables. rate specifies failure rates corresponding interval duration specified duration. final interval extended infinite ensure observations generated.","code":""},{"path":"https://merck.github.io/simtrial/reference/rpwexp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Piecewise Exponential Distribution — rpwexp","text":"Using cumulative=TRUE option, enrollment times piecewise constant time can generated.","code":""},{"path":"https://merck.github.io/simtrial/reference/rpwexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Piecewise Exponential Distribution — rpwexp","text":"","code":"# get 10k piecewise exponential failure times # failure rates are 1 for time 0-.5, 3 for time .5 - 1 and 10 for >1. # intervals specifies duration of each failure rate interval # with the final interval running to infinity x <- rpwexp(10000, failRates=tibble::tibble(rate = c(1, 3, 10), duration = c(.5,.5,1))) plot(sort(x),(10000:1)/10001,log=\"y\", main=\"PW Exponential simulated survival curve\", xlab=\"Time\",ylab=\"P{Survival}\")  # exponential failure times x <- rpwexp(10000, failRates=tibble::tibble(rate = 5, duration=1))  plot(sort(x),(10000:1)/10001,log=\"y\", main=\"Exponential simulated survival curve\",      xlab=\"Time\",ylab=\"P{Survival}\")"},{"path":"https://merck.github.io/simtrial/reference/simPWSurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a stratified time-to-event outcome randomized trial — simPWSurv","title":"Simulate a stratified time-to-event outcome randomized trial — simPWSurv","text":"simPWSurv enables simulation clinical trial essentially arbitrary patterns enrollment, failure rates censoring. piecewise exponential distribution allows simple method specify distribtuion enrollment pattern enrollment, failure dropout rate changes time. main purpose may generate trial can analyzed single point time using group sequential methods, routine can also used simulate adaptive trial design. Enrollment, failure dropout rates specified treatment group, stratum time period. Fixed block randomization used; blocks must include treatments provided failure dropout specification. Default arguments set allow simple implementation non-proportional hazards assumption unstratified design.","code":""},{"path":"https://merck.github.io/simtrial/reference/simPWSurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a stratified time-to-event outcome randomized trial — simPWSurv","text":"","code":"simPWSurv(   n = 100,   strata = tibble::tibble(Stratum = \"All\", p = 1),   block = c(rep(\"Control\", 2), rep(\"Experimental\", 2)),   enrollRates = tibble::tibble(rate = 9, duration = 1),   failRates = tibble::tibble(Stratum = rep(\"All\", 4), period = rep(1:2, 2), Treatment =     c(rep(\"Control\", 2), rep(\"Experimental\", 2)), duration = rep(c(3, 1), 2), rate =     log(2)/c(9, 9, 9, 18)),   dropoutRates = tibble::tibble(Stratum = rep(\"All\", 2), period = rep(1, 2), Treatment     = c(\"Control\", \"Experimental\"), duration = rep(100, 2), rate = rep(0.001, 2)) )"},{"path":"https://merck.github.io/simtrial/reference/simPWSurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a stratified time-to-event outcome randomized trial — simPWSurv","text":"n Number observations. length(n) > 1, length taken number required. strata tibble strata specified Stratum, probability (incidence) stratum p block Vector treatments included  block enrollRates Enrollment rates; see details examples failRates Failure rates; see details examples; note treatments need input block dropoutRates Dropout rates; see details examples; note treatments need input block","code":""},{"path":"https://merck.github.io/simtrial/reference/simPWSurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a stratified time-to-event outcome randomized trial — simPWSurv","text":"tibble following variables observation Stratum, enrollTime (enrollment time observation), Treatment (treatment group; one values input block), failTime (failure time generated using rpwexp()), dropoutTime (dropout time generated using rpwexp()), cte (calendar time enrollment plot minimum failure time dropout time), fail (indicator cte set using failure time; .e., 1 failure, 0 dropout).","code":""},{"path":"https://merck.github.io/simtrial/reference/simPWSurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a stratified time-to-event outcome randomized trial — simPWSurv","text":"","code":"library(dplyr) # Tests  simPWSurv(n=20) #> # A tibble: 20 × 7 #> # Groups:   Stratum, Treatment [2] #>    Stratum enrollTime Treatment    failTime dropoutTime   cte  fail #>    <chr>        <dbl> <chr>           <dbl>       <dbl> <dbl> <dbl> #>  1 All         0.0708 Control        12.4         397.  12.5      1 #>  2 All         0.281  Experimental   22.8         188.  23.1      1 #>  3 All         0.291  Experimental   24.4         961.  24.7      1 #>  4 All         0.499  Control         6.44        864.   6.94     1 #>  5 All         0.645  Control        12.9        1708.  13.6      1 #>  6 All         0.822  Experimental   61.5         312.  62.3      1 #>  7 All         0.868  Control         3.98         65.3  4.84     1 #>  8 All         0.959  Experimental    9.66       1980.  10.6      1 #>  9 All         1.23   Experimental   29.3        1631.  30.5      1 #> 10 All         1.27   Control        13.7         372.  15.0      1 #> 11 All         1.36   Experimental   30.6        1424.  31.9      1 #> 12 All         1.43   Control        21.9        1206.  23.3      1 #> 13 All         1.45   Control        28.2         603.  29.6      1 #> 14 All         1.55   Control        15.9        1440.  17.5      1 #> 15 All         1.72   Experimental   17.4         838.  19.2      1 #> 16 All         1.74   Experimental   70.1         930.  71.8      1 #> 17 All         2.03   Experimental   33.6        1552.  35.6      1 #> 18 All         2.24   Control         0.175      3659.   2.41     1 #> 19 All         2.56   Control         2.68        546.   5.24     1 #> 20 All         2.60   Experimental    1.49        257.   4.09     1  # 3:1 randomization  simPWSurv(n=20,block=c(rep(\"Experimental\",3),\"Control\")) #> # A tibble: 20 × 7 #> # Groups:   Stratum, Treatment [2] #>    Stratum enrollTime Treatment    failTime dropoutTime   cte  fail #>    <chr>        <dbl> <chr>           <dbl>       <dbl> <dbl> <dbl> #>  1 All          0.164 Experimental   21.5         126.  21.7      1 #>  2 All          0.177 Experimental   33.1         607.  33.3      1 #>  3 All          0.207 Experimental   67.4         758.  67.6      1 #>  4 All          0.304 Control        15.2        3965.  15.5      1 #>  5 All          0.338 Experimental   10.7         790.  11.1      1 #>  6 All          0.341 Control         5.24       4031.   5.58     1 #>  7 All          0.497 Experimental   14.6        2065.  15.1      1 #>  8 All          0.579 Experimental   28.1         552.  28.7      1 #>  9 All          0.776 Experimental    0.879       951.   1.66     1 #> 10 All          0.901 Experimental   18.5         591.  19.4      1 #> 11 All          0.977 Control        11.9         114.  12.9      1 #> 12 All          1.07  Experimental    0.886        66.1  1.95     1 #> 13 All          1.13  Control         4.16       2076.   5.29     1 #> 14 All          1.26  Experimental    3.10        478.   4.36     1 #> 15 All          1.35  Experimental   12.8         330.  14.1      1 #> 16 All          1.39  Experimental   15.3        2828.  16.6      1 #> 17 All          1.41  Experimental    2.94       1953.   4.35     1 #> 18 All          1.46  Experimental    0.403       451.   1.87     1 #> 19 All          1.57  Control        17.8         147.  19.3      1 #> 20 All          1.59  Experimental   29.9        1103.  31.5      1  # Simulate 2 strata; will use defaults for blocking and enrollRates simPWSurv(n=20,           # 2 strata,30% and 70% prevalence           strata=tibble::tibble(Stratum=c(\"Low\",\"High\"),p=c(.3,.7)),           failRates=tibble::tibble(Stratum=c(rep(\"Low\",4),rep(\"High\",4)),                                    period=rep(1:2,4),                                    Treatment=rep(c(rep(\"Control\",2),rep(\"Experimental\",2)),2),                                    duration=rep(c(3,1),4),                                    rate=c(.03,.05,.03,.03,.05,.08,.07,.04)),           dropoutRates=tibble::tibble(Stratum=c(rep(\"Low\",2),rep(\"High\",2)),                                       period=rep(1,4),                                       Treatment=rep(c(\"Control\",\"Experimental\"),2),                                       duration=rep(1,4),                                       rate=rep(.001,4)) ) #> # A tibble: 20 × 7 #> # Groups:   Stratum, Treatment [4] #>    Stratum enrollTime Treatment    failTime dropoutTime   cte  fail #>    <chr>        <dbl> <chr>           <dbl>       <dbl> <dbl> <dbl> #>  1 Low         0.0155 Experimental    66.6         40.3 40.3      0 #>  2 High        0.148  Experimental    39.1        367.  39.2      1 #>  3 Low         0.175  Experimental    18.3         48.6 18.5      1 #>  4 Low         0.270  Control         11.2        486.  11.4      1 #>  5 Low         0.314  Control         10.6       1751.  10.9      1 #>  6 High        0.434  Control          4.20       640.   4.63     1 #>  7 Low         0.588  Experimental    34.8       1193.  35.3      1 #>  8 High        0.688  Experimental     6.38       284.   7.07     1 #>  9 Low         0.735  Control         40.5        186.  41.2      1 #> 10 High        0.781  Control          7.69      1191.   8.47     1 #> 11 Low         1.04   Control         10.6        186.  11.7      1 #> 12 High        1.14   Experimental    59.7         69.4 60.9      1 #> 13 High        1.21   Control          2.24       964.   3.45     1 #> 14 Low         1.30   Experimental     2.09      1263.   3.40     1 #> 15 High        1.31   Experimental    74.9       1669.  76.2      1 #> 16 High        1.58   Control          3.04      1361.   4.62     1 #> 17 Low         1.61   Control         40.1        413.  41.7      1 #> 18 Low         1.68   Experimental    59.8        785.  61.5      1 #> 19 Low         1.92   Control          9.43       181.  11.4      1 #> 20 High        2.13   Experimental    95.8        921.  98.0      1  # If you want a more rectangular entry for a tibble failRates <- bind_rows(    tibble(Stratum=\"Low\" ,period=1,Treatment=\"Control\"     ,duration=3,rate=.03),    tibble(Stratum=\"Low\" ,period=1,Treatment=\"Experimental\",duration=3,rate=.03),    tibble(Stratum=\"Low\" ,period=2,Treatment=\"Experimental\",duration=3,rate=.02),    tibble(Stratum=\"High\",period=1,Treatment=\"Control\"     ,duration=3,rate=.05),    tibble(Stratum=\"High\",period=1,Treatment=\"Experimental\",duration=3,rate=.06),    tibble(Stratum=\"High\",period=2,Treatment=\"Experimental\",duration=3,rate=.03) ) dropoutRates <- bind_rows(    tibble(Stratum=\"Low\" ,period=1,Treatment=\"Control\"     ,duration=3,rate=.001),    tibble(Stratum=\"Low\" ,period=1,Treatment=\"Experimental\",duration=3,rate=.001),    tibble(Stratum=\"High\",period=1,Treatment=\"Control\"     ,duration=3,rate=.001),    tibble(Stratum=\"High\",period=1,Treatment=\"Experimental\",duration=3,rate=.001) ) simPWSurv(n=12,strata=tibble(Stratum=c(\"Low\",\"High\"),p=c(.3,.7)),          failRates=failRates,dropoutRates=dropoutRates) #> # A tibble: 12 × 7 #> # Groups:   Stratum, Treatment [4] #>    Stratum enrollTime Treatment    failTime dropoutTime    cte  fail #>    <chr>        <dbl> <chr>           <dbl>       <dbl>  <dbl> <dbl> #>  1 High        0.0465 Experimental     6.30       690.    6.35     1 #>  2 Low         0.252  Experimental    11.1        533.   11.4      1 #>  3 High        0.258  Control          7.26      1579.    7.52     1 #>  4 High        0.271  Control         29.4       1175.   29.6      1 #>  5 High        0.272  Experimental     2.47       595.    2.74     1 #>  6 Low         0.705  Experimental   175.        1055.  176.       1 #>  7 High        0.738  Control         53.0       2471.   53.7      1 #>  8 High        0.959  Experimental    37.1        468.   38.0      1 #>  9 High        1.05   Experimental    16.0       1843.   17.0      1 #> 10 High        1.09   Control          4.97       774.    6.06     1 #> 11 Low         1.15   Control         43.7       1662.   44.8      1 #> 12 Low         1.22   Control          7.67        98.8   8.89     1"},{"path":"https://merck.github.io/simtrial/reference/simfix.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of fixed sample size design for time-to-event endpoint — simfix","title":"Simulation of fixed sample size design for time-to-event endpoint — simfix","text":"simfix() provide simulations single endpoint two-arm trial enrollment, hazard ratio, failure dropout rates change time.","code":""},{"path":"https://merck.github.io/simtrial/reference/simfix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of fixed sample size design for time-to-event endpoint — simfix","text":"","code":"simfix(   nsim = 1000,   sampleSize = 500,   targetEvents = 350,   strata = tibble::tibble(Stratum = \"All\", p = 1),   enrollRates = tibble::tibble(duration = c(2, 2, 10), rate = c(3, 6, 9)),   failRates = tibble::tibble(Stratum = \"All\", duration = c(3, 100), failRate =     log(2)/c(9, 18), hr = c(0.9, 0.6), dropoutRate = rep(0.001, 2)),   totalDuration = 30,   block = rep(c(\"Experimental\", \"Control\"), 2),   timingType = 1:5,   rg = tibble::tibble(rho = 0, gamma = 0) )"},{"path":"https://merck.github.io/simtrial/reference/simfix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of fixed sample size design for time-to-event endpoint — simfix","text":"nsim Number simulations perform. sampleSize Total sample size per simulation. targetEvents Targeted event count analysis. strata tibble strata specified Stratum, probability (incidence) stratum p. enrollRates Piecewise constant enrollment rates time period. Note overall population enrollment rates strata argument controls random distribution strata. failRates Piecewise constant control group failure rates, hazard ratio experimental vs control, dropout rates stratum time period. totalDuration Total follow-start enrollment data cutoff. block simtrial::simPWSurv(). Vector treatments included block. timingType numeric vector determining data cutoffs used; see details. Default include available cutoff methods. rg simtrial::tenFHCorr(). tibble variables rho gamma, greater equal zero, specify one Fleming-Harrington weighted logrank test per row.","code":""},{"path":"https://merck.github.io/simtrial/reference/simfix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of fixed sample size design for time-to-event endpoint — simfix","text":"tibble including columns Events (event count), lnhr (log-hazard ratio), Z (normal test statistic; < 0 favors experimental) cut (text describing cutoff used), Duration (duration trial cutoff analysis) sim (sequential simulation id). One row per simulated dataset per cutoff specified timingType, per test statistic specified. multiple Fleming-Harrington tests specified rg, columns rho,gammaare also included.","code":""},{"path":"https://merck.github.io/simtrial/reference/simfix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of fixed sample size design for time-to-event endpoint — simfix","text":"timingType 5 elements indicating different options data cutoff. 1 uses planned study duration, 2 time targeted event count achieved, 3 planned minimum follow-enrollment complete, 4 maximum planned study duration targeted event count cuts (1 2), 5 maximum targeted event count minimum follow-cuts (2 3).","code":""},{"path":"https://merck.github.io/simtrial/reference/simfix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of fixed sample size design for time-to-event endpoint — simfix","text":"","code":"library(tidyr) library(dplyr) # Show output structure simfix(nsim=3) #>    Events       lnhr         Z                              cut Duration Sim #> 1      92 -0.3128897 -1.490033                 Planned duration 30.00000   1 #> 2     350 -0.5021028 -4.612538                  Targeted events 72.85907   1 #> 3     355 -0.5028353 -4.657850                Minimum follow-up 74.43384   1 #> 4     350 -0.5021028 -4.612538 Max(planned duration, event cut) 72.85907   1 #> 5     355 -0.5028353 -4.657850    Max(min follow-up, event cut) 74.43384   1 #> 6     101 -0.4778714 -2.380747                 Planned duration 30.00000   2 #> 7     350 -0.4791463 -4.460631                  Targeted events 65.97012   2 #> 8     380 -0.4922374 -4.766701                Minimum follow-up 73.43063   2 #> 9     350 -0.4791463 -4.460631 Max(planned duration, event cut) 65.97012   2 #> 10    380 -0.4922374 -4.766701    Max(min follow-up, event cut) 73.43063   2 #> 11    104 -0.4804010 -2.419694                 Planned duration 30.00000   3 #> 12    350 -0.4855681 -4.511520                  Targeted events 73.54686   3 #> 13    350 -0.4854395 -4.510305                Minimum follow-up 73.98536   3 #> 14    350 -0.4855681 -4.511520 Max(planned duration, event cut) 73.54686   3 #> 15    350 -0.4854395 -4.510305    Max(min follow-up, event cut) 73.98536   3 # Example with 2 tests: logrank and FH(0,1) simfix(nsim=1,rg=tibble::tibble(rho=0,gamma=c(0,1))) #>    Events       lnhr rho gamma         Z        V1        V2 #> 1      95 -0.3680582   0     0 -1.777574 1.0000000 0.8388841 #> 2      95 -0.3680582   0     1 -2.119641 0.8388841 1.0000000 #> 3     350 -0.2272778   0     0 -2.120176 1.0000000 0.8535068 #> 4     350 -0.2272778   0     1 -2.571627 0.8535068 1.0000000 #> 5     357 -0.2333218   0     0 -2.199242 1.0000000 0.8540263 #> 6     357 -0.2333218   0     1 -2.684065 0.8540263 1.0000000 #> 7     350 -0.2272778   0     0 -2.120176 1.0000000 0.8535068 #> 8     350 -0.2272778   0     1 -2.571627 0.8535068 1.0000000 #> 9     357 -0.2333218   0     0 -2.199242 1.0000000 0.8540263 #> 10    357 -0.2333218   0     1 -2.684065 0.8540263 1.0000000 #>                                 cut Duration Sim #> 1                  Planned duration 30.00000   1 #> 2                  Planned duration 30.00000   1 #> 3                   Targeted events 69.37263   1 #> 4                   Targeted events 69.37263   1 #> 5                 Minimum follow-up 70.54840   1 #> 6                 Minimum follow-up 70.54840   1 #> 7  Max(planned duration, event cut) 69.37263   1 #> 8  Max(planned duration, event cut) 69.37263   1 #> 9     Max(min follow-up, event cut) 70.54840   1 #> 10    Max(min follow-up, event cut) 70.54840   1 # Power by test # Only use cuts for events, events + min follow-up xx <- simfix(nsim=100,timingType=c(2,5),rg=tibble::tibble(rho=0,gamma=c(0,1))) # Get power approximation for FH, data cutoff combination xx %>% group_by(cut,rho,gamma) %>% summarise(mean(Z<=qnorm(.025))) #> `summarise()` has grouped output by 'cut', 'rho'. You can override using the #> `.groups` argument. #> # A tibble: 4 × 4 #> # Groups:   cut, rho [2] #>   cut                             rho gamma `mean(Z <= qnorm(0.025))` #>   <chr>                         <dbl> <dbl>                     <dbl> #> 1 Max(min follow-up, event cut)     0     0                      0.97 #> 2 Max(min follow-up, event cut)     0     1                      1    #> 3 Targeted events                   0     0                      0.97 #> 4 Targeted events                   0     1                      0.99 # MaxCombo power estimate for cutoff at max of targeted events, minimum follow-up p <- xx %>%  filter(cut != \"Targeted events\") %>% group_by(Sim) %>% group_map(pMaxCombo) p <- unlist(p) mean(p<.025) #> [1] 0.98 # MaxCombo estimate for targeted events cutoff p <- unlist(xx %>%  filter(cut == \"Targeted events\") %>% group_by(Sim) %>% group_map(pMaxCombo)) mean(p<.025) #> [1] 0.99"},{"path":"https://merck.github.io/simtrial/reference/simfix2simPWSurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion of enrollment and failure rates from simfix() to simPWSurv() format — simfix2simPWSurv","title":"Conversion of enrollment and failure rates from simfix() to simPWSurv() format — simfix2simPWSurv","text":"simfix2simPWSurv() converts failure rates dropout rates entered simpler format simfix() used simtrial::simPWSurv(). failRates argument simfix() requires enrollment rates, failure rates hazard ratios dropout rates strata 2-arm trial, simtrial::simPWSurv() flexible less obvious flexible format. Since simfix() automatically analyzes data simtrial::simPWSurv() just produces simulation dataset, latter provides additional options analyze otherwise evaluate individual simulations ways simfix() .","code":""},{"path":"https://merck.github.io/simtrial/reference/simfix2simPWSurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion of enrollment and failure rates from simfix() to simPWSurv() format — simfix2simPWSurv","text":"","code":"simfix2simPWSurv(   failRates = tibble::tibble(Stratum = \"All\", duration = c(3, 100), failRate =     log(2)/c(9, 18), hr = c(0.9, 0.6), dropoutRate = rep(0.001, 2)) )"},{"path":"https://merck.github.io/simtrial/reference/simfix2simPWSurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion of enrollment and failure rates from simfix() to simPWSurv() format — simfix2simPWSurv","text":"failRates Piecewise constant control group failure rates, hazard ratio experimental vs control, dropout rates stratum time period.","code":""},{"path":"https://merck.github.io/simtrial/reference/simfix2simPWSurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion of enrollment and failure rates from simfix() to simPWSurv() format — simfix2simPWSurv","text":"list two tibble components formatted simtrial::simPWSurv(): failRates dropoutRates.","code":""},{"path":"https://merck.github.io/simtrial/reference/simfix2simPWSurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion of enrollment and failure rates from simfix() to simPWSurv() format — simfix2simPWSurv","text":"","code":"library(tidyr) library(dplyr) # Convert standard input simfix2simPWSurv() #> $failRates #> # A tibble: 4 × 5 #>   Stratum period Treatment    duration   rate #>   <chr>    <int> <chr>           <dbl>  <dbl> #> 1 All          1 Control             3 0.0770 #> 2 All          2 Control           100 0.0385 #> 3 All          1 Experimental        3 0.0693 #> 4 All          2 Experimental      100 0.0231 #>  #> $dropoutRates #> # A tibble: 4 × 5 #>   Stratum period Treatment    duration  rate #>   <chr>    <int> <chr>           <dbl> <dbl> #> 1 All          1 Control             3 0.001 #> 2 All          2 Control           100 0.001 #> 3 All          1 Experimental        3 0.001 #> 4 All          2 Experimental      100 0.001 #>  # Stratified example failRates <- tibble::tibble(Stratum=c(rep(\"Low\",3),rep(\"High\",3)),                             duration=rep(c(4,10,100),2),                             failRate=c(.04,.1,.06,                                        .08,.16,.12),                             hr=c(1.5,.5,2/3,                                  2, 10/16, 10/12),                             dropoutRate=.01 ) x <- simfix2simPWSurv(failRates) # Do a single simulation with the above rates # Enroll 300 patients in ~12 months at constant rate sim <-     simPWSurv(n=300,           strata=tibble::tibble(Stratum=c(\"Low\",\"High\"),p=c(.6,.4)),           enrollRates=tibble::tibble(duration=12,rate=300/12),           failRates=x$failRates,           dropoutRates=x$dropoutRates) # Cut after 200 events and do a stratified logrank test dat <- sim %>%        cutDataAtCount(200) %>%            # cut data        tensurv(txval=\"Experimental\") %>%  # convert format for tenFH        tenFH(rg=tibble(rho=0,gamma=0))    # stratified logrank"},{"path":"https://merck.github.io/simtrial/reference/simtrial-package.html","id":null,"dir":"Reference","previous_headings":"","what":"simtrial: Clinical Trial Simulation — simtrial-package","title":"simtrial: Clinical Trial Simulation — simtrial-package","text":"simtrial provides basic routines simulating clinical trial. primary intent provide tools generate trial simulations trials time event outcomes. Piecewise exponential failure rates piecewise constant enrollment rates underlying mechanism used simulate broad range scenarios. However, basic generation data done using pipes allow maximum flexibility users meet different needs.","code":""},{"path":[]},{"path":"https://merck.github.io/simtrial/reference/simtrial-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simtrial: Clinical Trial Simulation — simtrial-package","text":"Maintainer: Yilong Zhang yilong.zhang@merck.com Authors: Keaven Anderson keaven_anderson@merck.com contributors: Amin Shirazi ashirazist@gmail.com [contributor] Ruixue Wang ruixue.wang@merck.com [contributor] Yi Cui yi.cui@merck.com [contributor] Ping Yang ping.yang1@merck.com [contributor] Yalin Zhu yalin.zhu@merck.com [contributor] Heng Zhou heng.zhou@merck.com [contributor] Merck Sharp & Dohme Corp [copyright holder]","code":""},{"path":"https://merck.github.io/simtrial/reference/tenFH.html","id":null,"dir":"Reference","previous_headings":"","what":"Fleming-Harrington Weighted Logrank Tests — tenFH","title":"Fleming-Harrington Weighted Logrank Tests — tenFH","text":"output function tensurv","code":""},{"path":"https://merck.github.io/simtrial/reference/tenFH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fleming-Harrington Weighted Logrank Tests — tenFH","text":"","code":"tenFH(   x = simPWSurv(n = 200) %>% cutDataAtCount(150) %>% tensurv(txval =     \"Experimental\"),   rg = tibble(rho = c(0, 0, 1, 1), gamma = c(0, 1, 0, 1)),   returnVariance = FALSE )"},{"path":"https://merck.github.io/simtrial/reference/tenFH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fleming-Harrington Weighted Logrank Tests — tenFH","text":"x tensurv-class tibble counting process dataset rg tibble variables rho gamma, greater equal zero, specify one Fleming-Harrington weighted logrank test per row; Default: tibble(rho = c(0, 0, 1, 1), gamma = c(0, 1, 0, 1)) returnVariance logical flag , true, adds columns estimated variance weighted sum observed minus expected; see details; Default: FALSE","code":""},{"path":"https://merck.github.io/simtrial/reference/tenFH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fleming-Harrington Weighted Logrank Tests — tenFH","text":"tibble rg input FH test statistic data x(Z, directional square root usual weighted logrank test); variance calculations specified (e.g., used covariances combination test), returned column Var","code":""},{"path":"https://merck.github.io/simtrial/reference/tenFH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fleming-Harrington Weighted Logrank Tests — tenFH","text":"input value x produced tensurv() produces counting process dataset grouped strata sorted within strata increasing times events occur. \\(Z\\) - standardized normal Fleming-Harrington weighted logrank test \\(\\)  - stratum index \\(d_i\\) - number distinct times events occurred stratum \\(\\) \\(t_{ij}\\) - ordered times events stratum \\(\\), \\(j=1,2,\\ldots d_i\\) observed; observation, \\(t_{ij}\\) represents time post study entry \\(O_{ij.}\\) - total number events stratum \\(\\) occurred time \\(t_{ij}\\) \\(O_{ije}\\) - total number events stratum \\(\\) experimental treatment group occurred time \\(t_{ij}\\) \\(N_{ij.}\\) - total number study subjects stratum \\(\\) followed least duration \\(E_{ije}\\) - expected observations experimental treatment group given random selection \\(O_{ij.}\\) stratum \\(\\) risk time \\(t_{ij}\\) \\(V_{ije}\\) - hypergeometric variance \\(E_{ije}\\) produced Var tensurv() routine \\(N_{ije}\\) - total number study subjects stratum \\(\\) experimental treatment group followed least duration \\(t_{ij}\\) \\(E_{ije}\\) - expected observations experimental group stratum \\(\\) time \\(t_{ij}\\) conditioning overall number events risk populations time sampling risk observations without replacement: $$E_{ije} = O_{ij.} N_{ije}/N_{ij.}$$ \\(S_{ij}\\) - Kaplan-Meier estimate survival combined treatment groups immediately prior time \\(t_{ij}\\) \\(\\rho, \\gamma\\) - real parameters Fleming-Harrington test \\(X_i\\) - Numerator signed logrank test stratum \\(\\) $$X_i = \\sum_{j=1}^{d_{}} S_{ij}^\\rho(1-S_{ij}^\\gamma)(O_{ije}-E_{ije})$$ \\(V_{ij}\\) - variance used denominator Fleming-Harrington weighted logrank tests $$V_i = \\sum_{j=1}^{d_{}} (S_{ij}^\\rho(1-S_{ij}^\\gamma))^2V_{ij})$$ stratified Fleming-Harrington weighted logrank test computed : $$Z = \\sum_i X_i/\\sqrt{\\sum_i V_i}$$","code":""},{"path":"https://merck.github.io/simtrial/reference/tenFH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fleming-Harrington Weighted Logrank Tests — tenFH","text":"","code":"library(tidyr) # Use default enrollment and event rates at cut at 100 events x <- simPWSurv(n=200) %>% cutDataAtCount(100) %>% tensurv(txval=\"Experimental\") # compute logrank (FH(0,0)) and FH(0,1) tenFH(x,rg=tibble(rho=c(0,0),gamma=c(0,1))) #> # A tibble: 2 × 3 #>     rho gamma      Z #>   <dbl> <dbl>  <dbl> #> 1     0     0 -0.618 #> 2     0     1 -1.96"},{"path":"https://merck.github.io/simtrial/reference/tenFHcorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Fleming-Harrington Weighted Logrank Tests plus Correlations — tenFHcorr","title":"Fleming-Harrington Weighted Logrank Tests plus Correlations — tenFHcorr","text":"Correlations can used mvtnorm::pmvnorm compute p-value MaxCombo, maximum specifed Fleming-Harrington tests","code":""},{"path":"https://merck.github.io/simtrial/reference/tenFHcorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fleming-Harrington Weighted Logrank Tests plus Correlations — tenFHcorr","text":"","code":"tenFHcorr(   x = simPWSurv(n = 200) %>% cutDataAtCount(100) %>% tensurv(txval =     \"Experimental\"),   rg = tibble(rho = c(0, 0, 1, 1), gamma = c(0, 1, 0, 1)),   corr = TRUE )"},{"path":"https://merck.github.io/simtrial/reference/tenFHcorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fleming-Harrington Weighted Logrank Tests plus Correlations — tenFHcorr","text":"x tensurv-class tibble counting process dataset rg tibble variables rho gamma, greater equal zero, specify one Fleming-Harrington weighted logrank test per row corr logical; TRUE (default), return correlation matrix; otherwise, return covariance matrix","code":""},{"path":"https://merck.github.io/simtrial/reference/tenFHcorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fleming-Harrington Weighted Logrank Tests plus Correlations — tenFHcorr","text":"tibble rg input, FH test statistics specified data Z, correlation covariance matrix tests variables starting V","code":""},{"path":"https://merck.github.io/simtrial/reference/tenFHcorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fleming-Harrington Weighted Logrank Tests plus Correlations — tenFHcorr","text":"","code":"library(tidyr) library(dplyr) # Use default enrollment and event rates at cut of 100 events x <- simPWSurv(n=200) %>% cutDataAtCount(100) %>% tensurv(txval=\"Experimental\") # compute logrank (FH(0,0)) and FH(0,1) x <- tenFHcorr(rg=tibble(rho=c(0,0),gamma=c(0,1)),x=x) # compute p-value for MaxCombo library(mvtnorm) 1-pmvnorm(lower=rep(min(x$Z),nrow(x)),corr=data.matrix(select(x,-c(rho,gamma,Z))), algorithm=GenzBretz(maxpts=50000,abseps=0.00001))[1] #> [1] 1.750262e-05 # check that covariance is as expected x <- simPWSurv(n=200) %>%          cutDataAtCount(100) %>%          tensurv(txval=\"Experimental\") x %>% tenFHcorr(rg=tibble(rho=c(0,0),gamma=c(0,1)),corr=FALSE) #>   rho gamma         Z        V1       V2 #> 1   0     0 -0.875497 24.922326 6.765953 #> 2   0     1 -2.133062  6.765953 2.604078 # Off-diagonal element should be variance in following x %>% tenFHcorr(rg=tibble(rho=0,gamma=.5),corr=FALSE) #>   rho gamma         Z       V1 #> 1   0   0.5 -1.600663 6.765953 # compare off diagonal result with tenFH() x %>% tenFH(rg=tibble(rho=0,gamma=.5)) #> # A tibble: 1 × 3 #>     rho gamma     Z #>   <dbl> <dbl> <dbl> #> 1     0   0.5 -1.60"},{"path":"https://merck.github.io/simtrial/reference/tensurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Survival Data into Counting Process Format — tensurv","title":"Process Survival Data into Counting Process Format — tensurv","text":"Produces tibble sorted stratum time. Included times one event occurs. output dataset contains Stratum, tte (time--event), risk count count events specified tte sorted Stratum tte.","code":""},{"path":"https://merck.github.io/simtrial/reference/tensurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Survival Data into Counting Process Format — tensurv","text":"","code":"tensurv(x, txval)"},{"path":"https://merck.github.io/simtrial/reference/tensurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Survival Data into Counting Process Format — tensurv","text":"x tibble missing values contain variables Stratum: Stratum Treatment: Treatment group tte: Observed time event: Binary event indicator, 1 represents event, 0 represents censoring txval value input Treatment column indicates treatment group value.","code":""},{"path":"https://merck.github.io/simtrial/reference/tensurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Survival Data into Counting Process Format — tensurv","text":"tibble grouped Stratum sorted within strata tte. Remain rows least one event population, least one subject risk treatment group control group. variables represent following within stratum time one events observed: events: Total number events txevents: Total number events treatment group atrisk: Number subjects risk txatrisk: Number subjects risk treatment group S: Left-continuous Kaplan-Meier survival estimate OminusE: treatment group, observed number events minus expected number events. expected number events estimated assuming treatment effect hypergeometric distribution parameters total number events, total number events treatment group number events time. (assumption log-rank test null hypothesis) Var: variance OminusE assumption.","code":""},{"path":"https://merck.github.io/simtrial/reference/tensurv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Survival Data into Counting Process Format — tensurv","text":"function considered two group situation. tie handled Breslow's Method.","code":""},{"path":"https://merck.github.io/simtrial/reference/tensurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Survival Data into Counting Process Format — tensurv","text":"","code":"library(dplyr)  # Example 1 x=tibble(Stratum = c(rep(1,10),rep(2,6)), Treatment = rep(c(1,1,0,0),4), tte = 1:16, event= rep(c(0,1),8))  tensurv(x, txval=1) #> # A tibble: 6 × 9 #> # Groups:   Stratum [2] #>   Stratum events txevents   tte atrisk txatrisk     S OminusE   Var #>     <dbl>  <dbl>    <dbl> <int>  <dbl>    <int> <dbl>   <dbl> <dbl> #> 1       1      1        1     2      9        5 1       0.444 0.247 #> 2       1      1        0     4      7        4 0.889  -0.571 0.245 #> 3       1      1        1     6      5        3 0.762   0.4   0.24  #> 4       1      1        0     8      3        2 0.610  -0.667 0.222 #> 5       2      1        0    12      5        2 1      -0.4   0.24  #> 6       2      1        1    14      3        1 0.8     0.667 0.222  # Example 2 x <- simPWSurv(n=400) y <- cutDataAtCount(x,150) %>% tensurv(txval = \"Experimental\") # weighted logrank test (Z-value and 1-sided p-value) z <- sum(y$OminusE)/sqrt(sum(y$Var)) c(z,pnorm(z)) #> [1] -1.71352402  0.04330809"},{"path":"https://merck.github.io/simtrial/reference/wMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Magirr and Burman Modestly Weighted Logrank Tests — wMB","title":"Magirr and Burman Modestly Weighted Logrank Tests — wMB","text":"Magirr Burman (2019) proposed weighted logrank test better power logrank test treatment effect delayed, still maintain good power proportional hazards assumption. weights early interval specified user inverse combined treatment group empirical survival distribution; see details. initial period, weights constant maximum previous weights. Another advantage test strong null hypothesis underlying survival control group greater equal underlying survival experimental group, Type error controlled specified level.","code":""},{"path":"https://merck.github.io/simtrial/reference/wMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magirr and Burman Modestly Weighted Logrank Tests — wMB","text":"","code":"wMB(x, delay = 4)"},{"path":"https://merck.github.io/simtrial/reference/wMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magirr and Burman Modestly Weighted Logrank Tests — wMB","text":"x tensurv-class tibble counting process dataset delay initial delay period weights increase; , weights constant final weigh delay period","code":""},{"path":"https://merck.github.io/simtrial/reference/wMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Magirr and Burman Modestly Weighted Logrank Tests — wMB","text":"vector weights Magirr-Burman weighted logrank test data x","code":""},{"path":"https://merck.github.io/simtrial/reference/wMB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Magirr and Burman Modestly Weighted Logrank Tests — wMB","text":"function computes Magirr-Burman weights adds dataset created tensurv() function. weights can used compute Z-statistic modestly weighted logrank test proposed. define \\(t^*\\) input variable delay. specifies initial period weights increase. define specific weights, let \\(S(t)\\) denote Kaplan-Meier survival estimate time \\(t\\) combined data (control plus experimental treatment groups). weight time \\(t\\) defined $$w(t)=S(\\min(t,t^*))^{-1}.$$","code":""},{"path":"https://merck.github.io/simtrial/reference/wMB.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Magirr and Burman Modestly Weighted Logrank Tests — wMB","text":"Magirr, Dominic, Carl‐Fredrik Burman. \"Modestly weighted logrank tests.\" Statistics Medicine 38.20 (2019): 3782-3790.","code":""},{"path":"https://merck.github.io/simtrial/reference/wMB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magirr and Burman Modestly Weighted Logrank Tests — wMB","text":"","code":"library(tidyr) library(dplyr) # Use default enrollment and event rates at cut at 100 events x <- simPWSurv(n=200) %>% cutDataAtCount(125) %>% tensurv(txval=\"Experimental\") # compute Magirr-Burman weights with  ZMB <- x %>% wMB(6) %>%               summarize(S=sum(OminusE*wMB),V=sum(Var*wMB^2),Z=S/sqrt(V)) # Compute p-value of modestly weighted logrank of Magirr-Burman pnorm(ZMB$Z) #> [1] 0.006475123"},{"path":"https://merck.github.io/simtrial/news/index.html","id":"simtrial-020-august-2020","dir":"Changelog","previous_headings":"","what":"simtrial 0.2.0, August, 2020","title":"simtrial 0.2.0, August, 2020","text":"Updated vignettes web site Prepared Regulatory/Industry Training session September","code":""},{"path":"https://merck.github.io/simtrial/news/index.html","id":"simtrial-0179004-february-2020","dir":"Changelog","previous_headings":"","what":"simtrial 0.1.7.9004, February, 2020","title":"simtrial 0.1.7.9004, February, 2020","text":"Added wMB() compute Magirr-Burman weights Added vignette demonstrate working different weighting schemes Replaced Depends Imports DESCRIPTION","code":""},{"path":"https://merck.github.io/simtrial/news/index.html","id":"simtrial-0179003-november-2019","dir":"Changelog","previous_headings":"","what":"simtrial 0.1.7.9003, November, 2019","title":"simtrial 0.1.7.9003, November, 2019","text":"Incorporated new functions simplify use (simfix, simfix2simPWSurv, pMaxCombo) Removed hgraph intent put release gsDesign Limited 2 essential vignettes Added continuous integration/continuous deployment (yaml) pkgdown web site development Limited dependencies essential; removed convenience functions related core package functionality","code":""}]
