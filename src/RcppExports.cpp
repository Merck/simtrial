// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rpwexpRcpp
NumericVector rpwexpRcpp(int n, DataFrame failRates);
RcppExport SEXP _simtrial_rpwexpRcpp(SEXP nSEXP, SEXP failRatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type failRates(failRatesSEXP);
    rcpp_result_gen = Rcpp::wrap(rpwexpRcpp(n, failRates));
    return rcpp_result_gen;
END_RCPP
}
// rpwexpinvRcpp
NumericVector rpwexpinvRcpp(int n, DataFrame failRates);
RcppExport SEXP _simtrial_rpwexpinvRcpp(SEXP nSEXP, SEXP failRatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type failRates(failRatesSEXP);
    rcpp_result_gen = Rcpp::wrap(rpwexpinvRcpp(n, failRates));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simtrial_rpwexpRcpp", (DL_FUNC) &_simtrial_rpwexpRcpp, 2},
    {"_simtrial_rpwexpinvRcpp", (DL_FUNC) &_simtrial_rpwexpinvRcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_simtrial(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
