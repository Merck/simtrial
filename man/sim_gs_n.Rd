% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_gs_n.R
\name{sim_gs_n}
\alias{sim_gs_n}
\title{Simulate group sequential designs with fixed sample size}
\usage{
sim_gs_n(
  n_sim = 1000,
  sample_size = 500,
  stratum = data.frame(stratum = "All", p = 1),
  enroll_rate = data.frame(duration = c(2, 2, 10), rate = c(3, 6, 9)),
  fail_rate = data.frame(stratum = "All", duration = c(3, 100), fail_rate = log(2)/c(9,
    18), hr = c(0.9, 0.6), dropout_rate = rep(0.001, 2)),
  block = rep(c("experimental", "control"), 2),
  test = wlr,
  cutting = NULL,
  seed = 2024,
  ...
)
}
\arguments{
\item{n_sim}{Number of simulations to perform.}

\item{sample_size}{Total sample size per simulation.}

\item{stratum}{A data frame with stratum specified in \code{stratum},
probability (incidence) of each stratum in \code{p}.}

\item{enroll_rate}{Piecewise constant enrollment rates by time period.
Note that these are overall population enrollment rates and the \code{stratum}
argument controls the random distribution between stratum.}

\item{fail_rate}{Piecewise constant control group failure rates, hazard ratio
for experimental vs. control, and dropout rates by stratum and time period.}

\item{block}{As in \code{\link[=sim_pw_surv]{sim_pw_surv()}}. Vector of treatments to be included
in each block.}

\item{test}{a test function such as \code{\link{wlr}},
\code{\link{maxcombo}}, or \code{\link{rmst}}. The simulated data set is
passed as the first positional argument to the test function provided.}

\item{cutting}{a list of cutting functions created by
\code{\link{create_cutting}}, see examples}

\item{seed}{random seed}

\item{...}{Arguments passed to the test function provided by the argument
\code{test}}
}
\value{
a data frame summarizing the simulation ID, analysis date, z statistics or p-values
}
\description{
Simulate group sequential designs with fixed sample size
}
\examples{
library(gsDesign2)

# parameters for enrollment
enroll_rampup_duration <- 4 # duration for enrollment ramp up
enroll_duration <- 16       # total enrollment duration
enroll_rate <- define_enroll_rate(duration = c(enroll_rampup_duration,
                                               enroll_duration - enroll_rampup_duration),
                                  rate = c(10, 30))

# parameters for treatment effect
delay_effect_duration <- 3  # delay treatment effect in months
median_col <- 9             # survival median of the control arm
median_exp <- c(9, 14)      # survival median of the experimental arm
dropout_rate <- 0.001
fail_rate <- define_fail_rate(duration = c(delay_effect_duration, 100),
                              fail_rate = log(2) /  median_col,
                              hr = median_col / median_exp,
                              dropout_rate = dropout_rate)

# other related parameters
alpha <- 0.025              # type I error
beta <- 0.1                 # type II error
ratio <- 1                  # randomization ratio (exp:col)

# Define cuttings of 2 IAs and 1 FA
# IA1
# The 1st interim analysis will occur at the later of the following 3 conditions:
# - At least 20 months have passed since the start of the study
# - At least 100 events have occurred
# - At least 20 months have elapsed after enrolling 200/400 subjects, with a
#   minimum of 20 months follow-up
# However, if events accumulation is slow, we will wait for a maximum of 24 months.
ia1 <- create_cutting(
  planned_calendar_time = 20,
  target_event_overall = 100,
  max_extension_for_target_event = 24,
  min_n_overall = 200,
  min_followup = 20
)

# IA2
# The 2nd interim analysis will occur at the later of the following 3 conditions:
# - At least 32 months have passed since the start of the study
# - At least 250 events have occurred
# - At least 10 months after IA1
# However, if events accumulation is slow, we will wait for a maximum of 34 months.
ia2 <- create_cutting(
  planned_calendar_time = 32,
  target_event_overall = 200,
  max_extension_for_target_event = 34,
  min_time_after_previous_analysis = 10
)

# FA
# The final analysis will occur at the later of the following 2 conditions:
# - At least 45 months have passed since the start of the study
# - At least 300 events have occurred
fa <- create_cutting(
  planned_calendar_time = 45,
  target_event_overall = 350
)

# Test 1: regular logrank test
sim_gs_n(
  n_sim = 3,
  sample_size = 400,
  enroll_rate = enroll_rate,
  fail_rate = fail_rate,
  test = wlr,
  cutting = list(ia1 = ia1, ia2 = ia2, fa = fa),
  seed = 2024,
  weight = fh(rho = 0, gamma = 0))

# Test 2: weighted logrank test by FH(0, 0.5)
sim_gs_n(
  n_sim = 3,
  sample_size = 400,
  enroll_rate = enroll_rate,
  fail_rate = fail_rate,
  test = wlr,
  cutting = list(ia1 = ia1, ia2 = ia2, fa = fa),
  seed = 2024,
  weight = fh(rho = 0, gamma = 0.5))


# Test 3: weighted logrank test by MB(6)
sim_gs_n(
  n_sim = 3,
  sample_size = 400,
  enroll_rate = enroll_rate,
  fail_rate = fail_rate,
  test = wlr,
  cutting = list(ia1 = ia1, ia2 = ia2, fa = fa),
  seed = 2024,
  weight = mb(delay = 3))

# Test 4: weighted logrank test by early zero (6)
sim_gs_n(
  n_sim = 3,
  sample_size = 400,
  enroll_rate = enroll_rate,
  fail_rate = fail_rate,
  test = wlr,
  cutting = list(ia1 = ia1, ia2 = ia2, fa = fa),
  seed = 2024,
  weight = early_zero(6))

# Test 5: RMST
sim_gs_n(
  n_sim = 3,
  sample_size = 400,
  enroll_rate = enroll_rate,
  fail_rate = fail_rate,
  test = rmst,
  cutting = list(ia1 = ia1, ia2 = ia2, fa = fa),
  seed = 2024,
  tau = 20)

# Test 6: maxcombo (FH(0,0) + FH(0, 0.5))
sim_gs_n(
  n_sim = 3,
  sample_size = 400,
  enroll_rate = enroll_rate,
  fail_rate = fail_rate,
  test = maxcombo,
  cutting = list(ia1 = ia1, ia2 = ia2, fa = fa),
  seed = 2024,
  test1 = wlr(data, rho = 0, gamma = 0) |> quote(),
  test2 = wlr(data, rho = 0, gamma = 0.5) |> quote())
}
